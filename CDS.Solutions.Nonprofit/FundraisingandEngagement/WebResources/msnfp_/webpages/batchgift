<html><!--/*************************************************************************
* Â© Microsoft. All rights reserved.
*/--><head>
    <title></title>
    <meta charset="utf-8">
    <link href="../scripts/jquery_ui.css" rel="stylesheet">
    <link href="../scripts/jquery.dataTables.min.css" rel="stylesheet">
    <link href="../scripts/common.css" rel="stylesheet">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.1.0/css/all.css" integrity="sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt" crossorigin="anonymous">
    <script src="../scripts/jQuery.js" type="text/javascript"></script>
    <script src="../scripts/jquery_ui.js" type="text/javascript"></script>
    <script src="../scripts/loadmask.js" type="text/javascript"></script>
    <script src="../scripts/jquery.dataTables.min.js" type="text/javascript"></script>
    <script src="../scripts/jquery.autocomplete.js"></script>
    <script src="../scripts/common.js" type="text/javascript"></script>
    <script src="../scripts/utilities" type="text/javascript"></script>
    <link href="../scripts/ManualDonation_BatchGift.css" rel="stylesheet">

    <style type="text/css">
        .switch-field {
            overflow: hidden;
        }

            .switch-field input {
                border: 0;
                clip: rect(0, 0, 0, 0);
                height: 1px;
                overflow: hidden;
                position: absolute !important;
                width: 1px;
            }

        .fa, .fas, .far {
            font-size: 18px !important;
            vertical-align: middle;
            font-style: normal !important;
            border-width: 0px !important;
        }

        .leftSp {
            margin-left: 58px;
        }

        /*.btnPlusMinus {
            font-size: 15px !important;
            border: 2px solid rgba(0,0,0,0.20) !important;
            transform: rotate(0deg) !important;
            -webkit-transform: rotate(0deg) !important;
            box-shadow: 1.5px 1.5px rgba(0, 0, 0, 0.30);
            border-radius: 4px;
            margin-top: 1px;
            background: #f3f3f3;
        }

            .btnPlusMinus:hover {
                box-shadow: 0px 0px rgba(0, 0, 0, 0.55);
            }*/

        .switch-field label {
            float: left;
        }

        .switch-field label {
            display: block;
            text-align: center;
            text-shadow: none;
            border: 1px solid #b4b4b4;
            -webkit-transition: all 0.1s ease-in-out;
            -moz-transition: all 0.1s ease-in-out;
            -ms-transition: all 0.1s ease-in-out;
            -o-transition: all 0.1s ease-in-out;
            transition: all 0.1s ease-in-out;
            -webkit-box-shadow: none;
            box-shadow: none;
            font-weight: bolder;
            color: #243a5e;
            font-family: 'Hind', sans-serif;
            font-size: 14px;
            background-color: #cccccc;
            padding: 5px 5px 3px 5px;
            text-transform: uppercase;
            cursor: pointer !important;
            white-space: nowrap;
        }

            .switch-field label:hover {
                cursor: pointer;
                color: white;
                border: 1px solid #243a5e;
                background-color: #243a5e;
            }

        .switch-field input:disabled + label {
            opacity: 0.3;
            cursor: default !important;
        }

            .switch-field input:disabled + label:hover {
                opacity: 0.3;
                cursor: default !important;
                background-color: #cccccc;
                color: black;
            }

        .switch-field input:checked + label {
            color: white;
            border: 1px solid #243a5e;
            background-color: #243a5e;
            opacity: 1;
            cursor: pointer !important;
        }

        .switch-field label:first-of-type {
            border-radius: 0px;
        }

        .switch-field label:last-of-type {
            border-radius: 0px;
        }

        .content-details input, .content-details select {
            margin: 6px;
            padding: .280rem .5rem;
            font-size: 1rem;
            line-height: 1.5;
            color: #495057;
            background-color: #fff;
            background-clip: padding-box;
            border: 1px solid #ced4da;
            border-radius: .25rem;
            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
            margin-top: 1px;
        }

        .form-container {
            margin-bottom: 20px;
            background-color: white;
            padding: 20px;
            border-top: 0.6em solid #243a5e;
            padding-right: 0px;
        }

        .main-button {
            border: 1px solid #1D2122 !important;
            border-radius: 30px !important;
            background-color: #1D2122 !important;
            padding: 13px 25px 12px 25px !important;
            text-transform: uppercase !important;
            color: white !important;
            cursor: pointer !important;
            font-family: 'Hind', sans-serif !important;
            font-weight: bolder !important;
            font-size: 16px !important;
            line-height: 1.3 !important;
            margin-top: 5px !important;
        }

            .main-button:hover {
                background-color: #1a1919;
            }

            .main-button .button-icon {
                margin-left: 10px;
                text-rendering: optimizeLegibility;
            }

        .main-button-sm {
            background-color: #ddd !important;
            border: 2px solid #c7c7c7 !important;
            padding: 4px 8px 0px 8px !important;
            font-family: 'Hind', sans-serif !important;
            font-weight: bold !important;
            text-transform: uppercase !important;
            font-size: 14px !important;
            color: #000 !important;
            cursor: pointer !important;
            letter-spacing: 0.4px !important;
            border-radius: 10px !important;
        }

            .main-button-sm:hover {
                background-color: #1a1919;
            }

        .ptb10 {
            padding: 10px 0;
        }

        .content-header h2 {
            color: #000000;
            font-size: 18px !important;
            margin-top: 10px;
            margin-bottom: 10px;
            text-transform: uppercase;
        }

        .content-header i {
            color: #7C7C7C;
            cursor: pointer;
            padding: 4px !important;
        }

        .title-header h2 {
            color: #000000;
            font-size: 18px !important;
            margin-top: 10px;
            margin-bottom: 10px;
            text-transform: uppercase;
        }

        .process-donation-main span.field-label {
            min-width: 120px;
        }

        .field-label {
            padding-right: 0px;
        }

        .mandatory span:after {
            color: red;
            content: '*';
            font-size: 15px;
            font-weight: bold;
            padding-left: 3px;
        }

        input.search-box {
            background-color: white;
            background-image: url('msnfp_searchicon.png');
            background-position: 98% 1px;
            background-repeat: no-repeat;
            border: 1px solid rgb(169, 169, 169);
            padding-right: 5%;
        }

        .search-box-container {
            position: relative;
            display: inline-block;
        }

            .search-box-container input {
                margin: 0;
                padding-right: 30px;
            }

            .search-box-container img {
                position: absolute;
                bottom: 0px;
                right: 0px;
                width: 15px;
                height: 15px;
                cursor: pointer;
                padding: 3px;
            }

        .error-msg, .newDonation-error {
            font-weight: bold;
            color: red;
        }

        .subsequent-main {
            max-width: 400px;
        }

        .donationFields select {
            min-width: 145px;
        }

        .red-border {
            border: solid 1px #CD2828 !important;
        }

        .blue-text {
            color: #1160b7;
            cursor: pointer;
            display: block;
            margin: 5px 10px;
        }
        /*.btnAddGreen { background-color: green; border: 2px solid #243a5e; border-radius: 18px; color: #fff; cursor: pointer; display: inline-block; font-family: fantasy; font-size: 22px; font-weight: lighter; height: 18px; line-height: 20px; margin-right: 5px; text-align: center; width: 18px; }
        .btnRemoveRed { background-color: red; border: 2px solid #243a5e; border-radius: 18px; color: #fff; cursor: pointer; display: inline-block; font-family: fantasy; font-size: 22px; font-weight: lighter; height: 18px; line-height: 20px; text-align: center; width: 18px; }*/
        .donationPledge {
            padding: 0 0px 0 75px;
            position: relative;
        }

            .donationPledge:nth-child(odd) {
                background: #ededed;
                padding-top: 7px;
                padding-bottom: 3px;
            }

            .donationPledge:nth-child(even) {
                background: #f9f9f9;
                padding-top: 7px;
                padding-bottom: 3px;
            }

        .add-remove-buttons {
            left: 8px;
            position: absolute;
            top: 10px;
        }

        .div-saveButton {
            margin-top: 3px;
            float: left;
            margin-right: 10px;
        }

        .form-control {
            display: inline-block;
            margin-left: 5px;
        }

            .form-control input {
                display: inline;
                width: 130px;
                margin: 6px;
                padding: .200rem .3rem .200rem .4rem;
                font-size: 14px;
                line-height: 1.5;
                color: #495057;
                background-color: #fff;
                background-clip: padding-box;
                border: 1px solid #ced4da;
                border-radius: .25rem;
                transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
                margin-top: 1px;
            }

            .form-control select {
                display: inline;
                width: 130px;
                margin: 6px;
                padding: .180rem .3rem .100rem .4rem;
                font-size: 14px;
                line-height: 1.5;
                color: #495057;
                background-color: #fff;
                background-clip: padding-box;
                border: 1px solid #ced4da;
                border-radius: .25rem;
                transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
                margin-top: 1px;
            }

                .form-control select:disabled {
                    opacity: 0.5;
                }

            .form-control i {
                border: ridge black;
                border-width: 0 2px 2px 0;
                display: inline-block;
                padding: 5px 5px;
                cursor: pointer;
                margin: 7px 10px 2px 0;
            }

                .form-control i.down {
                    transform: rotate(45deg);
                    -webkit-transform: rotate(45deg);
                }

                .form-control i.up {
                    transform: rotate(-135deg);
                    -webkit-transform: rotate(-135deg);
                    border-bottom: solid 4px #7C7C7C !important;
                    border-right: solid 4px #7C7C7C !important;
                    margin: 15px 8px 2px 0;
                }

        i.up {
            transform: rotate(-135deg);
            -webkit-transform: rotate(-135deg);
        }

        span.arrow.up {
            margin: 15px 8px 2px 0 !important;
        }

        .arrow {
            border: ridge black;
            border-width: 0 2px 2px 0;
            display: inline-block;
            padding: 5px 5px;
            cursor: pointer;
            margin: 9px 8px 2px 0;
            float: left;
            font-style: normal !important;
            border-bottom: solid 4px #7C7C7C !important;
            border-right: solid 4px #7C7C7C !important;
        }

        .hide {
            display: none;
        }

        .searchDonationMain {
            padding: 20px 30px;
        }

        .newDonation table {
            width: 100%;
        }

        .newDonation tr td {
            padding: 10px;
        }

        #ajax-loader {
            position: fixed;
            width: 100%;
            height: 100%;
            text-align: center;
            background: grey;
            opacity: 0.8;
            filter: alpha(opacity=40);
            display: none;
            background: lightGrey url("../images/ajaxloader.gif") no-repeat center center;
            z-index: 2000;
        }

        .back-color {
            background-color: #243a5e !important;
        }
    </style>
    <meta>
    <meta>
<meta></head>
<body style="overflow-wrap: break-word;">
    <div id="ajax-loader"></div>

    <!-- The Modal -->
    <div id="donorCommitmentsModal" class="modal" style="display: none;">
        <!-- Modal content -->
        <div class="modal-content">
            <div class="modal-header">
                <h2>Link Existing Pledge</h2>
                <span class="closeBtn">Ã</span>
            </div>


            <div class="form-group existing-pledge hide">
                <table id="searchResult" class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Date</th>
                            <th style="min-width:250px;">Installment</th>
                            <th>Amount</th>
                            <th>Balance</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <div class="subsequent-buttons clearfix" style="padding-top:5px;">

                    <input id="btnCancelModal" class="float-right" type="button" value="Cancel">&nbsp;
                    <input id="btnComplete" class="float-right" type="button" value="Complete">
                </div>
                <div class="error-msg" role="alert">
                    Please select a donation.
                </div>
            </div>


        </div>
    </div>


    <div class="container batchGift-main">

        <div class="ms-col-8 ptb10 cols">
            <div class="title-header" style="float:left;width: 160px;margin-top: 4px;">
                <h2 id="h2ProcessGifts" class="noselect" style="margin: 0;">PROCESS GIFTS</h2>
            </div>
        </div>

        <div style="border-style:none;background:#ededed;padding:12px;padding-top:4px;padding-bottom:4px;">
            <div class="ms-col-8 ptb10 cols">
                <div class="switch-field" style="margin-right: 15px; float: left;" role="navigation">
                    <input type="radio" id="radioCash" name="paymentType" value="844060000" checked="">
                    <label for="radioCash">Cash</label>
                    <input type="radio" id="radioCheque" name="paymentType" value="844060001">
                    <label for="radioCheque">Check</label>
                    <!--<input type="radio" id="radioCreditDebit" name="paymentType" value="844060002">
                    <label for="radioCreditDebit">Credit / Debit</label>-->
                    <input type="radio" id="radioBankACH" name="paymentType" value="844060003">
                    <label for="radioBankACH">Bank (ACH)</label>
                    <input type="radio" id="radioInKind" name="paymentType" value="844060004">
                    <label for="radioInKind">In Kind</label>
                    <!--<input type="radio" id="radioGift" name="paymentType" value="844060005">
                    <label for="radioGift">Gift</label>-->
                    <!--<input type="radio" id="radioStock" name="paymentType" value="844060006">
                    <label for="radioStock">Stock</label>-->
                    <!--<input type="radio" id="radioProperty" name="paymentType" value="844060007">
                    <label for="radioProperty">Property</label>-->
                    <input type="radio" id="radioOther" name="paymentType" value="844060008">
                    <label for="radioOther">Other</label>
                    <input type="radio" id="radioWireTransfer" name="paymentType" value="844060009">
                    <label for="radioWireTransfer">Wire or Transfer</label>
                    <!--<input type="radio" id="radioBACSDirectDebit" name="paymentType" value="844060010">
                    <label for="radioBACSDirectDebit">BACS Direct Debit</label>-->
                    <input type="radio" id="radioExtCreditCard" name="paymentType" value="844060012">
                    <label for="radioExtCreditCard">Ext. Credit Card</label>
                </div>

                <div class="switch-field" role="navigation">
                    <input type="radio" id="radioPhone" name="giftSource" value="844060000" checked="">
                    <label for="radioPhone" style="width:80px !important">
                        Phone
                    </label>
                    <input type="radio" id="radioMail" name="giftSource" value="844060002">
                    <label for="radioMail" style="width:80px !important">
                        Mail
                    </label>
                    <input type="radio" id="radioOnline" name="giftSource" value="844060003">
                    <label class="lblInOnline" for="radioOnline" style="width:80px !important">Online</label>
                    <input type="radio" id="radioInPerson" name="giftSource" value="844060001">
                    <label for="radioInPerson" style="width:80px !important"><!--<i class="far fa-handshake"></i>&nbsp;&nbsp;-->In Person</label>
                    <input type="radio" id="radioSocial" name="giftSource" value="844060004">
                    <label for="radioSocial" style="width:80px !important"><!--<i class="far fa-handshake"></i>&nbsp;&nbsp;-->Social</label>
                </div>
            </div>
        </div>

        <div class="ms-col-8 ptb10 cols">
            <div class="title-header" style="float:left;width: 160px;margin-top: 4px;">
                <h2 id="h2RelatedGifts">Related Gifts</h2>
            </div>
        </div>

        <div id="content-body" style="width: 96%;">
            <table class="content-header" id="tblDonationPledge" style="border-style:none;background:#ededed;width:100%;" cellspacing="0" cellpadding="0">
                <tbody>
                    <tr>
                        <td style="padding: 0px !important;">
                            <div class="process-donation hide" style="clear:both;">
                                <div class="content-details donationPledgeList" style="float: left;width:100%;">
                                </div>
                            </div>
                            <div class="donationPledge-clone hide" style="width: 100%;">
                                <div>
                                    <input type="hidden" class="hiddenPledgeId">
                                    <div class="add-remove-buttons">
                                        <a href="javascript:;" class="btnAddGreen" title="Add a Gift" tabindex="0" role="button">
                                            <span style="color:#243a5e;cursor: pointer;" class="btnPlusMinus fas fa-plus" aria-hidden="true" aria-label="Add a Gift"></span>
                                        </a>
                                        <a href="javascript:;" class="btnRemoveRed" title="Remove this Gift" tabindex="0" role="button">
                                            <span style="color:#d83b01;cursor: pointer;padding-left:10px;" class="btnPlusMinus fas fa-minus" aria-hidden="true" aria-label="Remove this Gift"></span>
                                        </a>
                                    </div>
                                    <a href="javascript:;" class="arrow down" title="Show Contact and Organization Information" tabindex="0" role="button">
                                        <span aria-label="Show Contact and Organization Information" aria-hidden="true"></span>
                                    </a>
                                    <div class="div-saveButton">
                                        <a href="javascript:;" class="button-save" data-isdisabled="true" title="Save your changes" tabindex="0" role="button">
                                            <span class="btnPlusMinus fas fa-save" style="font-size: 24px;color:#0078d4;cursor: pointer;padding-left:10px;" aria-hidden="true" aria-label="Save your changes"></span>
                                        </a>
                                    </div>
                                </div>
                                <div class="leftSp">
                                    <input type="hidden" class="hiddenDonorCommitmentId">
                                    <div class="form-control divCustomer mandatory">
                                        <div class="field-label" style="display: inline-block; width: 50px;">
                                            <span class="field-label" aria-label="The related constituent or organization that the transaction is related to." title="The related constituent or organization that the transaction is related to." aria-required="true">Donor</span>
                                        </div>
                                        <div class="search-box-container">
                                            <input type="text" class="autocompleteDonor" style="width: 181px;" aria-label="Donor">
                                        </div>
                                    </div>
                                    <div class="form-control divAmountTotal mandatory">
                                        <span class="field-label" aria-label="Total Amount" title="Total Amount">Total Amount</span>
                                        <input class="txtAmountTotal" aria-label="Total Amount" type="text" style="width: 87px; text-align: right;" onkeypress="return validateFloatKeyPress(this, event)" aria-required="true">
                                        <input type="hidden" class="hdnGiftAmountTotal">
                                    </div>
                                    <div class="form-control divAmountNonReceiptable">
                                        <span class="field-label" aria-label="The non-receiptable portion of the total header amount" title="The non-receiptable portion of the total header amount">Amount (Nonreceiptable)</span>
                                        <input class="txtAmountNonReceiptable" type="text" style="width: 87px;text-align:right" onkeypress="return validateFloatKeyPress(this, event)" aria-label="Amount (Nonreceiptable)">
                                        <input type="hidden" class="hdnGiftAmountNonReceiptable">
                                    </div>
                                    <div class="form-control divAmountMembership hide">
                                        <span class="field-label" aria-label="This is the amount (typically dollar value although this application is capable of multiple currencies) of the membership amount being paid today." title="This is the amount (typically dollar value although this application is capable of multiple currencies) of the membership amount being paid today.">Amount (Membership)</span>
                                        <input class="txtAmountMembership" type="text" style="width: 87px;text-align:right" onkeypress="return validateFloatKeyPress(this, event)" aria-label="Amount (Membership)">
                                        <input type="hidden" class="hdnGiftAmountMembership">
                                    </div>
                                    <div class="form-control divConfirmAmount">
                                        <span class="field-label" aria-label="This is the amount (typically dollar value although this application is capable of multiple currencies) of the donation." title="This is the amount (typically dollar value although this application is capable of multiple currencies) of the donation.">Confirm Amount</span>
                                        <input class="txtAmount" type="text" readonly="readonly" style="width: 87px; text-align: right; background-color: #e9ecef;" onkeypress="return validateFloatKeyPress(this, event)" aria-label="Confirm Amount">
                                        <input type="hidden" class="hdnGiftAmount">
                                    </div>
                                    <div class="form-control mandatory divGiftType">
                                        <div class="field-label" style="display: inline-block; width: 67px;">
                                            <span class="field-label" aria-label="The type of transaction that the donation or pledge represents, typically this will be Cash, Credit\Debit Card or Cheque however also covers In Kind and Other" title="The type of transaction that the donation or pledge represents, typically this will be Cash, Credit\Debit Card or Cheque however also covers In Kind and Other">Gift Type</span>
                                        </div>
                                        <select class="ddlGiftType" style="width: 117px;" aria-label="Gift Type" aria-required="true" role="listbox">
                                            <option value="" role="option">--Select--</option>
                                        </select>
                                    </div>
                                    <div class="form-control divGiftSource">
                                        <div class="field-label" style="display: inline-block; width: 67px;">
                                            <span class="field-label" aria-label="Source" title="Source">Source</span>
                                        </div>
                                        <select class="ddlGiftSource" style="width:110px;" aria-label="Source" role="listbox">
                                            <option value="" role="option">--Select--</option>
                                            <option value="844060000" role="option">Phone</option>
                                            <option value="844060001" role="option">In Person</option>
                                            <option value="844060002" role="option">Direct Mail</option>
                                            <option value="844060003" role="option">Online</option>
                                            <option value="844060004" role="option">Social</option>
                                        </select>
                                    </div>
                                    <div class="form-control form-scheduleinstance hide">
                                        <span class="field-label" aria-label="Over" title="Over">Over</span>
                                        <input type="text" class="txtScheduleInstance" aria-label="Over" style="margin-right: 10px; width: 50px;" onkeypress="return isNumber(event)">
                                        <select class="ddlScheduleEveryDayType" aria-label="Select" role="lsitbox">
                                            <option value="" role="option">--Select--</option>
                                            <option value="844060000" role="option">Days</option>
                                            <option value="844060001" role="option">Weeks</option>
                                            <option value="844060002" role="option">Months</option>
                                            <option value="844060003" role="option">Years</option>
                                        </select>
                                    </div>
                                    <div class="form-control form-chequeNumber hide">
                                        <div class="field-label" style="display: inline-block; width: 71px;">
                                            <span class="field-label" aria-label="The check or wire number of the payment process, mandatory if the user selected Check or Wire form the payment type." title="The check or wire number of the payment process, mandatory if the user selected Check form the payment type.">Check #</span>
                                        </div>
                                        <input type="text" class="txtChequeNumber" style="width: 72px;" aria-label="Check #">
                                    </div>
                                    <div class="form-control divFund">
                                        <span class="field-label" aria-label="Fund" title="Fund">Fund</span>
                                        <input type="text" class="autoCompleteFund" style="width: 210px;" aria-label="Fund">
                                    </div>
                                    <div class="form-control divReceiptPreference">
                                        <div class="field-label" style="display: inline-block;">
                                            <span class="field-label" aria-label="The receipt preference that is defaulted from the account or contact but can be modified or set at the transaction level." title="The receipt preference that is defaulted from the account or contact but can be modified or set at the transaction level.">Receipt Preference</span>
                                        </div>
                                        <select class="ddlReceiptPreference" style="width:130px;" aria-label="Receipt Preference" role="listbox">
                                            <option value="" role="option">--Select--</option>
                                            <option value="844060000" role="option">DO NOT RECEIPT</option>
                                            <option value="844060001" role="option">Email</option>
                                            <option value="844060002" role="option">Print</option>
                                            <option value="844060003" role="option">Both</option>
                                        </select>
                                    </div>
                                    <div class="form-control">
                                        <span class="field-label" aria-label="Originating Campaign" title="Originating Campaign">Campaign</span>
                                        <input type="text" class="autoCompleteCampaign" style="width: 210px;" aria-label="Campaign">
                                    </div>
                                    <div class="form-control">
                                        <span class="field-label" aria-label="The Primary designation for this record" title="The Primary designation for this record">Designation</span>
                                        <input type="text" class="autoCompleteDesignation" style="width: 210px;" aria-label="Designation">
                                    </div>
                                    <div class="form-control inner-controls divGiftAidAvailable hide">
                                        <span class="field-label">DELCARATION ON FILE</span>
                                    </div>
                                    <div class="form-control inner-controls divGiftAidNotAvailable hide">
                                        <span class="field-label" aria-label="How the declaration has been or is being delivered to the donor." title="How the declaration has been or is being delivered to the donor.">Declaration Delivered</span>
                                        <select class="ddlDeclarationDelivered" style="width:150px;" aria-label="Declaration Delivered" role="listbox">
                                            <option value="0" role="option">--Select--</option>
                                            <option value="844060000" role="option">Online</option>
                                            <option value="844060001" role="option">Verbal</option>
                                            <option value="844060002" role="option">Mail</option>
                                        </select>
                                    </div>
                                    <div class="form-control inner-controls divPledgeOnFile hide">
                                        <input class="btnClassPledgeOnFile btnPledgeOnFile" style="width:170px; font-weight:bold; text-align:center" type="button" value="PLEDGE ON FILE">
                                    </div>
                                    <div style="display:none !important;">
                                        <div class="form-control inner-controls">
                                            <span class="field-label" aria-label="Pledge" title="Pledge">Pledge</span>
                                            <select class="ddlPledge" aria-label="Pledge" role="listbox"></select>
                                        </div>
                                        <div class="form-control inner-controls">
                                            <span class="field-label" aria-label="Allocation" title="Allocation">Allocation</span>
                                            <select class="ddlAllocation" aria-label="Allocation" role="listobx"></select>
                                        </div>
                                    </div>
                                    <div class="form-control divDescription hide">
                                        <span class="field-label" aria-label="The description of the gift, this is mandatory when a user selects In-kind, Gift, Stock or Property." title="The description of the gift, this is mandatory when a user selects In-kind, Gift, Stock or Property.">Description</span>
                                        <input type="text" class="txtDescription" style="width: 210px;" aria-label="Description">
                                    </div>
                                    <div class="form-control inner-controls divHouseholdOnFile hide">
                                        <input class="btnHouseholdOnFile" style="width:170px; font-weight:bold; text-align:center; cursor:pointer;" type="button" value="HOUSEHOLD ON FILE">
                                    </div>
                                    <div class="form-control divHouseholdRelationship" hide="">
                                        <div class="field-label" style="display: inline-block;">
                                            <span class="field-label" aria-label="Household Relationship" title="Household Relationship">Household Relationship</span>
                                        </div>
                                        <select class="ddlHouseholdRelationship" style="width:210px;" aria-label="Select - Household Relationship" role="listbox">
                                            <option value="" role="option">--Select--</option>
                                            <option value="844060000" role="option">Primary Household Member</option>
                                            <option value="844060001" role="option">Member</option>
                                            <!--<option value="844060002" role="option">Minor</option>
                                            <option value="844060003" role="option">Deceased</option>-->
                                        </select>
                                    </div>
                                    <div class="form-control divStatusCode">
                                        <span class="field-label">Status:</span>
                                        <input class="txtStatus" style="color: #000000;background-color:#e9ecef" readonly="readonly" aria-label="Status">
                                        <span class="txtStateCode" style="display: none;"></span>
                                    </div>
                                </div>
                                <div class="leftSp">
                                    <div class="form-control inner-controls divDepositeDate hide">
                                        <span class="field-label">Deposit Date</span>
                                        <input type="text" class="txtDepositeDate" style="width: 90px;" aria-label="Deposit Date" title="Deposit Date (mm/dd/yyyy)">
                                    </div>
                                </div>
                                <div class="customerFields leftSp">
                                    <div class="form-control inner-controls hide">
                                        <span class="field-label">First Name</span>
                                        <input type="text" style="width: 165px;" class="txtFirstName" aria-label="First Name">
                                    </div>
                                    <div class="form-control inner-controls hide">
                                        <span class="field-label">Last Name</span>
                                        <input type="text" style="width: 136px;" class="txtLastName" aria-label="Last Name">
                                    </div>
                                    <div class="form-control inner-controls hide">
                                        <span class="field-label">Email</span>
                                        <input type="text" style="width: 307px;" class="txtEmail" aria-label="Email">
                                    </div>
                                    <div class="form-control inner-controls hide divPhone">
                                        <span class="field-label" style="display: inline-block;">Phone</span>
                                        <input type="text" style="width: 104px;" class="txtPhone" aria-label="Phone">
                                    </div>
                                </div>
                                <div class="customerFields leftSp">
                                    <div class="form-control inner-controls hide">
                                        <span class="field-label">Organization</span>
                                        <input type="text" style="width: 152px;" class="txtOrganization" aria-label="Organization">
                                    </div>
                                    <div class="form-control inner-controls hide divLine1">
                                        <span class="field-label">Street 1</span>
                                        <input type="text" style="width: 154px;" class="txtStreet1" aria-label="Street 1">
                                    </div>
                                    <div class="form-control inner-controls hide divLine2">
                                        <span class="field-label">Street 2</span>
                                        <input type="text" class="txtStreet2" style="width: 137px;" aria-label="Street 2">
                                    </div>
                                    <div class="form-control inner-controls hide divCity">
                                        <span class="field-label">City</span>
                                        <input type="text" style="width: 108px;" class="txtCity" aria-label="City">
                                    </div>
                                    <div class="form-control inner-controls hide divState">
                                        <div class="field-label" style="display: inline-block;">
                                            <span class="field-label">State</span>
                                        </div>
                                        <input type="text" style="width: 103px;" class="txtProvince" aria-label="State">
                                    </div>
                                    <div class="form-control inner-controls hide divPostalCode">
                                        <span class="field-label">Zip Code</span>
                                        <input type="text" style="width: 67px;" class="txtPostalCode" aria-label="Zip Code">
                                    </div>
                                    <div class="form-control inner-controls hide" style="display: none !important;">
                                        <div class="field-label" style="display: inline-block; width: 64px;">
                                            <span class="field-label">Street 3</span>
                                        </div>
                                        <input type="text" class="txtStreet3" aria-label="Street 3">
                                    </div>
                                    <div class="error-msg" role="alert"></div>
                                </div>
                                <div class="customerFields leftSp">
                                    <div class="inner-controls hide divFAmain">
                                        <table class="table-main">
                                            <tbody></tbody>
                                        </table>
                                        <table class="hide table-clone">
                                            <tbody><tr>
                                                <td class="text-center" style="width: 2.5%">
                                                    <a class="btnAdd" href="javascript:;">
                                                    </a>
                                                </td>
                                                <td class="text-center" style="width: 2.5%">
                                                    <a class="btnRemove" href="javascript:;">
                                                    </a>
                                                </td>
                                                <td style="width: 35%;">
                                                    <label class="field-label">Fund</label>
                                                    <select class="form-control ddlFundList" role="listbox">
                                                        <option value="" role="option"></option>
                                                    </select>
                                                </td>
                                                <td style="width: 60%;">
                                                    <label class="form-control field-label">Amount</label>
                                                    <input type="text" class="txtFAAmount" onkeypress="return validateFloatKeyPress(this, event)">
                                                </td>
                                            </tr>
                                        </tbody></table>
                                        <div style="height: 40px;">
                                            <div class="float-left" style="width: 70%">
                                                <div class="error-msg" role="alert"></div>
                                                <div class="success-msg"></div>
                                            </div>
                                            <div class="float-right" style="width: 30%">
                                                <div class="div-buttons">
                                                    <div class="btn float-right">
                                                        <a class="" href="javascript:;">
                                                        </a>
                                                    </div>
                                                    <div class="btn float-right">
                                                        <a class="" href="javascript:;">
                                                        </a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="searchDonationMain hide" style="clear:both;" id="divDonationMain">
                                <div class="switch-field">
                                    <input type="radio" id="radioConstitute" name="searchDonationType" value="1">
                                    <label for="radioConstitute">Constitute</label>
                                    <input type="radio" id="radioOrganization" name="searchDonationType" value="2">
                                    <label for="radioOrganization">Organization</label>
                                    <input type="radio" id="radioNewConstitute" name="searchDonationType" value="3">
                                    <label for="radioNewConstitute">New Constitute</label>
                                    <input type="radio" id="radioNewOrganization" name="searchDonationType" value="4">
                                    <label for="radioNewOrganization">New Organization</label>
                                </div>

                                <div class="searchDonationContact-container">
                                    <table id="searchDonationContact" style="width: 100%;">
                                        <thead>
                                            <tr>
                                                <th style="width: 14% !important;">Full Name</th>
                                                <th style="width: 14% !important;">Organization</th>
                                                <th style="width: 14% !important;">Email</th>
                                                <th style="width: 14% !important;">Telephone 1</th>
                                                <th style="width: 14% !important;">Address Line 1</th>
                                                <th style="width: 8% !important;">City</th>
                                                <th style="width: 8% !important;">State</th>
                                                <th style="width: 8% !important;">Zip Code</th>
                                                <th style="width: 6% !important;">VIP?</th>
                                            </tr>
                                        </thead>
                                        <tbody></tbody>
                                    </table>
                                </div>

                                <div class="searchDonationOrganization-cotainer hide">
                                    <table id="searchDonationOrganization" style="width: 100%;">
                                        <thead>
                                            <tr>
                                                <th style="width: 14% !important;">Organization</th>
                                                <th style="width: 14% !important;">Primary Contact</th>
                                                <th style="width: 14% !important;">Email</th>
                                                <th style="width: 14% !important;">Telephone 1</th>
                                                <th style="width: 14% !important;">Address Line 1</th>
                                                <th style="width: 8% !important;">City</th>
                                                <th style="width: 8% !important;">State</th>
                                                <th style="width: 8% !important;">Zip Code</th>
                                                <th style="width: 6% !important;">VIP?</th>
                                            </tr>
                                        </thead>
                                        <tbody></tbody>
                                    </table>
                                </div>

                                <div class="newDonation hide">
                                    <table>
                                        <tbody>
                                            <tr>
                                                <td class="mandatory">
                                                    <span>First Name</span>
                                                </td>
                                                <td>
                                                    <div class="mandatory">
                                                        <input type="text" id="txtNewFirstName">
                                                    </div>
                                                </td>
                                                <td>Email</td>
                                                <td><input type="text" id="txtNewEmail"></td>
                                                <td>Address Line 1</td>
                                                <td><input type="text" id="txtNewAddressLine1"></td>
                                                <td>Address State</td>
                                                <td><input type="text" id="txtNewAddressProvicne"></td>
                                            </tr>
                                            <tr>
                                                <td class="mandatory">
                                                    <span>Last Name</span>
                                                </td>
                                                <td>
                                                    <div class="mandatory">
                                                        <input type="text" id="txtNewLastName">
                                                    </div>
                                                </td>
                                                <td>Phone</td>
                                                <td><input type="text" id="txtNewPhone"></td>
                                                <td>Address Line 2</td>
                                                <td><input type="text" id="txtNewAddressLine2"></td>
                                                <td>Address Zip Code</td>
                                                <td><input type="text" id="txtNewAddressPostalCode"></td>
                                            </tr>
                                            <tr>
                                                <td class="tdInstitute">
                                                    <span>Institute/Organization</span>
                                                </td>
                                                <td>
                                                    <div>
                                                        <input type="text" id="txtNewInstitute">
                                                    </div>
                                                </td>
                                                <td></td>
                                                <td></td>
                                                <td>Address City</td>
                                                <td><input type="text" id="txtNewAddressCity"></td>
                                                <td></td>
                                                <td></td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <div class="newDonation-error hide" role="alert"></div>
                                </div>

                                <div class="float-right">
                                    <a id="btnSelectClose" href="javascript:;">Select and Close &gt;</a>
                                </div>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <script type="text/javascript">
        var DonationPledgeType = {
            Donation: 84406000,
            Pledge: 84406001,
            PledgeSchedule: 84406003,
            Grant: 84406004,
            DonationSchedule: 84406009,
            RecurringDonation: 84406010,
        }

        var DonationOccurrence = {
            PostDated: 84406000,
            Recurring: 84406001,
            Instant: 84406002
        }

        var PaymentType = {
            Cash: 844060000,
            Cheque: 844060001,
            CreditDebit: 844060002,
            Bank: 844060003,
            InKind: 844060004,
            Gift: 844060005,
            Stock: 844060006,
            Property: 844060007,
            Other: 844060008,
            WireTransfer: 844060009,
            DirectDebit: 844060010,
            FundTrasfer: 844060011,
            ExternalCreditDebit: 844060012
        }

        var GiftSource = {
            Phone: 844060000,
            Inperson: 844060001,
            Mail: 844060002,
            Online: 844060003,
            Social: 844060004
        }

        var SearchDonationType = {
            Constitute: 1,
            Organization: 2,
            NewConstitute: 3,
            NewOrganization: 4
        }

        var xrm;
        var formType;
        var id;

        var giftTypeList = [];
        var typeList = [];

        var eventList = [];
        var selectedEvent = null;

        var locationList = [];
        var selectedLocation = null;

        var donorList = [];
        var selectedDonor = null;
        var donorId = null;

        var constituteList = [];
        var selectedConstitute = null;
        var constituteId = null;

        var pledgeList = [];
        var pledgeAllocationList = [];
        var donationPledgeList = [];

        var lastSearchDonorControl = null;
        var searchDonationContactList = [];
        var searchDonationOrganizationList = [];

        var searchDonationLoaded = false;
        var searchConstituteTable;
        var searchOrganizationTable;
        var isFormLoaded = false;
        var parentPledge = null;
        var configRec = null;
        var currencySymbol = "";
        var isGiftTypeHidden = true;
        var isFundHidden = true;
        var isInHonorHidden = true;
        var isDepositeDateHidden = true;
        var isFundAllocationHidden = false;
        var isNonReceiptableHidden = false;
        var isAmountMembershipHidden = false;
        var isGiftSourceHidden = false;
        var isReceiptPreferenceHidden = false;

        var removedAllocations = [];

        var fundList = [];
        var selectedFund = null;
        var fundID = null;

        var campaignList = [];
        var selectedCampaign = null;
        var campaignID = null;
        var deleteFACount = 0;

        var designationList = [];
        var selectedDesignation = null;
        var designationID = null;


        var searchTable;
        var activeSelectedRow;
        var validationMessage;

        $(document).ready(function () {
            console.debug("msnfp_BatchGift.html");

            xrm = XrmUtility.get_Xrm();
            formType = xrm.Page.ui.getFormType();
            id = xrm.Page.data.entity.getId().replace('{', '').replace('}', '');

            var radioCash = $('#radioCash').next('label')[0];
            radioCash.focus();

            bindConfiguration();
            bindChangeEvent();
            getCurrencySymbol();

            // enabling enter key press to add new row
            //$('#tblDonationPledge').keypress(function (event) {
            //    enableEnter(event);
            //});


            if (formType === FormType.Create) {

                $('input[name=paymentType]').each(function (index) {
                    var $this = $(this);
                    if (index == 0) {
                        $this.prop('checked', true);
                        xrm.Page.getAttribute('msnfp_gifttypecode').setValue(parseInt($this.val()));
                        return;
                    }
                });

                $('input[name=giftSource]').each(function (index) {
                    var $this = $(this);
                    if (index == 0) {
                        $this.prop('checked', true);
                        xrm.Page.getAttribute('msnfp_dataentrysource').setValue(parseInt($this.val()));
                        return;
                    }
                });

                var currentDate = new Date();
                currentDate.setHours(0, 0, 0, 0);
                xrm.Page.getAttribute('msnfp_bookdate').setValue(currentDate);
                var dt = currentDate.getDate() + "/" + (currentDate.getMonth() + 1) + "/" + currentDate.getFullYear();
                $('#txtDate').val(getFormattedDate(currentDate));

                $('#content-body').hide();
            }
            else if (formType == FormType.Update || formType == FormType.Disabled) {
                $('#content-body').show();
                if (formType == FormType.Disabled)
                    $('div.container').find('*').prop('disabled', true);

                $('.process-donation').show();
                loadBatchGiftData();

                loadDonorList();
                loadTypeList();
                loadGiftTypeList();
                // NFP CHANGE: Funds are deprecated loadFundList();
                loadCampaignList();
                loadDesignationList();

                loadDonationPledge();
                disableFields();

                // This simply sets the h2 text as gift or credit depending on the batch type selected:
                changeRelatedGiftsHeaderText();

                $('.searchDonationMain .switch-field input').each(function () {
                    $(this).attr("disabled", false);
                });
            }

            $('.donationPledge').find('.button-save').hide();

            $('input[name=paymentType]').change(function () {
                xrm.Page.getAttribute('msnfp_gifttypecode').setValue(parseInt($(this).val()));
            });

            $('.donationPledgeList').on('click', '.btnAddGreen', function () {
                if (formType != FormType.Disabled && xrm.Page.getAttribute('statuscode').getValue() != 844060000) {
                    xrm.Page.ui.clearFormNotification("svd");
                    addNewRow(null, true);
                }
            });

            $('.donationPledgeList').on('keypress', '.autocompleteDonor', function () {
                if ($(this).val() != null && $(this).val().length >= 3) {
                    if (!isNullOrUndefined($(this).val())) {
                        donorList = [];
                        var encodedName = ($(this).val()).replace(/'/g, "''");
                        var selectc = "contacts?$select=contactid,fullname,firstname,lastname,emailaddress1,telephone1,address1_line1,address1_line2,address1_line3,address1_city,address1_stateorprovince,address1_postalcode,msnfp_constituentnumber";
                        var filterc = "&$filter=(statecode eq 0) and (contains(fullname, '" + encodedName + "') eq true or contains(msnfp_constituentnumber, '" + encodedName + "') eq true) &$orderby=fullname";
                        console.log(filterc);
                        var resultc = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + selectc + filterc);

                        $(resultc).each(function () {
                            donorList.push({
                                id: this.contactid,
                                name: this.fullname,
                                postalCode: this.address1_postalcode,
                                cNumber: this.msnfp_constituentnumber,
                                isAccount: false
                            });
                        });
                        bindDonorAutocomplete($(this));
                    }
                }
            });

            $('.donationPledgeList').on('keypress', '.autoCompleteFund', function () {
                if ($(this).val() != null && $(this).val().length >= 1) {
                    if (!isNullOrUndefined($(this).val())) {
                    }
                }
            });

            $('.donationPledgeList').on('keypress', '.autoCompleteCampaign', function () {
                if ($(this).val() != null && $(this).val().length >= 1) {
                    if (!isNullOrUndefined($(this).val())) {
                        campaignList = [];

                        var selectf = "campaigns?$select=campaignid,name&$orderby=name";
                        var resultf = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + selectf);

                        $(resultf).each(function () {
                            campaignList.push({
                                id: this.campaignid,
                                name: this.name,
                            });
                        });
                        bindCampaignAutoComplete($(this));
                    }
                }
            });

            $('.donationPledgeList').on('keypress', '.autoCompleteDesignation', function () {
                if ($(this).val() != null && $(this).val().length >= 1) {
                    if (!isNullOrUndefined($(this).val())) {
                        designationList = [];

                        var selectf = "msnfp_designations?$select=msnfp_designationid,msnfp_name&$orderby=msnfp_name";
                        var resultf = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + selectf);

                        $(resultf).each(function () {
                            designationList.push({
                                id: this.msnfp_designationid,
                                name: this.msnfp_name
                            });
                        });
                        bindDesignationAutoComplete($(this));
                    }
                }
            });

            $('.donationPledgeList').on('click', '.btnRemoveRed', function () {
                var parentPledge = $(this).parents('.donationPledge');

                if (formType != FormType.Disabled && xrm.Page.getAttribute('statuscode').getValue() != 844060000) {
                    // Note that xrm.Utility.confirmDialog is deprecated, it is now xrm.Navigation.openConfirmDialog:
                    var confirmStrings = { text: "Are you sure to delete this Donation?", title: "Remove Donation", cancelButtonLabel: "Cancel", confirmButtonLabel: "Yes" };
                    var confirmOptions = { height: 200, width: 450 };
                    xrm.Navigation.openConfirmDialog(confirmStrings, confirmOptions).then(
                        function (success) {
                            if (success.confirmed) {

                                // set the focus somewhere logical
                                if (parentPledge.prev('.donationPledge').length > 0) {
                                    parentPledge.prev('.donationPledge').find('.btnAddGreen')[0].focus();
                                }
                                else if (parentPledge.next('.donationPledge').length > 0) {
                                    parentPledge.next('.donationPledge').find('.btnAddGreen')[0].focus();
                                }
                                else {
                                    $('#radioCash').next('label').focus();
                                }

                                removeSelectedDonationConfirmation(parentPledge);
                            }
                            else {
                                console.log("Dialog closed using Cancel button or X.");

                                // set the focus back on the button
                                parentPledge.find('.btnRemoveRed')[0].focus();
                            }
                        });
                }
            });

            $('.donationPledgeList').on('change', '.ddlGiftType', function () {
                var $this = $(this);
                //var checkNumberField = $this.parents('.donationPledge').find('.form-chequeNumber')[0];
                var checkNumberField = $this.closest('.donationPledge').find('.form-chequeNumber')[0];
                var checkNumberInput = $this.closest('.donationPledge').find('.txtChequeNumber')[0];
                $(checkNumberField).addClass('hide');
                $(checkNumberField).removeClass('mandatory');
                $(checkNumberInput).removeAttr('aria-required');
                if ($this.val() == PaymentType.Cheque || $this.val() == PaymentType.WireTransfer) {
                    $(checkNumberField).removeClass('hide');
                    $(checkNumberField).addClass('mandatory');
                    $(checkNumberInput).attr('aria-required', true);
                    if ($this.val() == PaymentType.WireTransfer) {
                        $(checkNumberField).find('span').text('Wire #');
                        $(checkNumberInput).attr('aria-label', "Wire #");
                    } else {
                        $(checkNumberField).find('span').text('Check #');
                        $(checkNumberInput).attr('aria-label', "Check #");
                    }
                }

                // show/hide description
                parentPledge = $(this).parents('.donationPledge');
                var txtAmountNonReceiptableControl = $(parentPledge).find('.txtAmountNonReceiptable')[0];
                var amtNonReceiptable = 0;
                var divDescription = $(parentPledge).find('.divDescription')[0];
                var descriptionInput = $(parentPledge).find('.txtDescription')[0];

                if (!isNullOrUndefined(txtAmountNonReceiptableControl)) {
                    amtNonReceiptable = parseFloat($(txtAmountNonReceiptableControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, ""));
                }

                if ((amtNonReceiptable > 0) || ($this.val() == PaymentType.InKind || $this.val() == PaymentType.Gift || $this.val() == PaymentType.Stock || $this.val() == PaymentType.Property)) {
                    $(divDescription).css('display', 'inline-block');
                    $(divDescription).addClass('mandatory');
                    $(descriptionInput).attr('aria-required', true);
                }
                else {
                    $(divDescription).css('display', 'none');
                    $(divDescription).removeClass('mandatory');
                    $(descriptionInput).removeAttr('aria-required');
                }
            });

            $('.donationPledgeList').on('click', '.arrow', function () {
                var $this = $(this);
                if ($this.hasClass('down')) {
                    $this.removeClass('down').addClass('up');
                    $this.parents('.donationPledge').find('.inner-controls').removeClass('hide');
                } else {
                    $this.removeClass('up').addClass('down');
                    $this.parents('.donationPledge').find('.inner-controls').addClass('hide');
                }
            });

            $('.donationPledgeList').on('change', '.ddlPledge', function () {
                var $this = $(this);
                var allocationControl = $this.parents('.donationPledge').find('.ddlAllocation')[0];
                loadPledgeAllocationList(allocationControl, $this.val());
            });

            $('.donationPledgeList').on('change', '.txtAmountTotal', function () {
                parentPledge = $(this).parents('.donationPledge');
                var txtAmountTotalControl = $(parentPledge).find('.txtAmountTotal')[0];

                $(parentPledge).find('.hdnGiftAmountTotal').val(parseFloat($(txtAmountTotalControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, "")));
                //valueChanged($(this));
                $(txtAmountTotalControl).val(currencySymbol + addCommasonLoad(parseFloat($(txtAmountTotalControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, "")).toFixed(2)));

                // if Confirm Amount = 0 (and Amount(Nonreceiptable) > 0), set Confirm Amount = Amount(Nonreceiptable)
                var amountTotal = parseFloat($(txtAmountTotalControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, ""));
                var txtAmountNonReceiptableControl = $(parentPledge).find('.txtAmountNonReceiptable')[0];
                var amtNonReceiptable = parseFloat($(txtAmountNonReceiptableControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, ""));
                if ((amountTotal === 0 || isNaN(amountTotal)) && amtNonReceiptable > 0) {
                    $(txtAmountTotalControl).val($(txtAmountNonReceiptableControl).val());
                    $(parentPledge).find('.hdnGiftAmountTotal').val(parseFloat($(txtAmountTotalControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, "")));
                }

                var txtAmountMembershipControl = $(parentPledge).find('.txtAmountMembership')[0];
                var amtMembership = parseFloat($(txtAmountMembershipControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, ""));


                var amountTotalReceiptable = getTotalReceiptableAmount($(txtAmountTotalControl).val(), $(txtAmountNonReceiptableControl).val(), isNonReceiptableHidden, $(txtAmountMembershipControl).val());
                $(parentPledge).find('.hdnGiftAmount').val(amountTotalReceiptable);
                $(parentPledge).find('.txtAmount').val(currencySymbol + addCommasonLoad(amountTotalReceiptable.toFixed(2)));

                valueChanged($(this));
                calculateCurrentAmount(false);
            });


            $('.donationPledgeList').on('change', '.txtAmountNonReceiptable', function () {
                parentPledge = $(this).parents('.donationPledge');
                var txtAmountNonReceiptableControl = $(parentPledge).find('.txtAmountNonReceiptable')[0];
                var amtNonReceiptable = 0;
                var divDescription = $(parentPledge).find('.divDescription')[0];
                var descriptionInput = $(parentPledge).find('.txtDescription')[0];
                var paymentType = 0;
                var txtAmountTotalControl = $(parentPledge).find('.txtAmountTotal')[0];
                var amountTotal = parseFloat($(txtAmountTotalControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, ""));
                var txtAmountMembershipControl = $(parentPledge).find('.txtAmountMembership')[0];
                var amountMembership = parseFloat($(txtAmountMembershipControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, ""));

                $(parentPledge).find('.hdnGiftAmountNonReceiptable').val(parseFloat($(txtAmountNonReceiptableControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, "")));
                //valueChanged($(this));
                $(txtAmountNonReceiptableControl).val(currencySymbol + addCommasonLoad(parseFloat($(txtAmountNonReceiptableControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, "")).toFixed(2)));

                //calculateCurrentAmount(true);

                if (!isNullOrUndefined(txtAmountNonReceiptableControl)) {
                    amtNonReceiptable = parseFloat($(txtAmountNonReceiptableControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, ""));
                }

                if (amtNonReceiptable > 0) {
                    $(divDescription).css('display', 'inline-block');
                    $(divDescription).addClass('mandatory');
                    $(descriptionInput).attr('aria-required', true);

                    // if Confirm Amount = 0 (and Amount(Nonreceiptable) > 0), set Confirm Amount = Amount(Nonreceiptable)
                    if ((amountTotal === 0 || isNaN(amountTotal)) && amtNonReceiptable > 0) {
                        $(txtAmountTotalControl).val($(txtAmountNonReceiptableControl).val());
                        $(parentPledge).find('.hdnGiftAmountTotal').val(parseFloat($(txtAmountTotalControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, "")));
                    }

                }
                else {

                    if (!isGiftTypeHidden) {
                        paymentType = $($(parentPledge).find('.ddlGiftType')[0]).val();
                    }

                    if (paymentType != PaymentType.InKind && paymentType != PaymentType.Gift && paymentType != PaymentType.Stock && paymentType != PaymentType.Property) {
                        $(divDescription).css('display', 'none');
                        $(divDescription).removeClass('mandatory');
                        $(descriptionInput).removeAttr('aria-required');
                    }
                }
                var amountTotalReceiptable = getTotalReceiptableAmount($(txtAmountTotalControl).val(), $(txtAmountNonReceiptableControl).val(), isNonReceiptableHidden, $(txtAmountMembershipControl).val());
                $(parentPledge).find('.hdnGiftAmount').val(amountTotalReceiptable);
                $(parentPledge).find('.txtAmount').val(currencySymbol + addCommasonLoad(amountTotalReceiptable.toFixed(2)));

                valueChanged($(this));
                calculateCurrentAmount(false);


            });

            $('.donationPledgeList').on('focus', '.txtAmountMembership', function () {
                parentPledge = $(this).parents('.donationPledge');
                var txtAmountMembershipControl = $(parentPledge).find('.txtAmountMembership')[0];
                $(txtAmountMembershipControl).data("prevVal", $(this).val());
            });

            $('.donationPledgeList').on('change', '.txtAmountMembership', function () {
                parentPledge = $(this).parents('.donationPledge');
                var txtAmountMembershipControl = $(parentPledge).find('.txtAmountMembership')[0];
                var membershipAmount = $(txtAmountMembershipControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, "");
                var previousMembershipAmount = !isNullOrUndefined($(txtAmountMembershipControl).data("prevVal"))
                    ? $(txtAmountMembershipControl).data("prevVal").replace(currencySymbol, '')
                        .replace(/[^\d\.\-]/g, "")
                    : 0;

                var totalAmountcontrol = $(parentPledge).find('.txtAmountTotal')[0];
                var totalAmount = !isNullOrUndefined($(totalAmountcontrol).val()) ? $(totalAmountcontrol).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, "") : 0;
                var amountReceiptableControl = $(parentPledge).find('.txtAmountNonReceiptable')[0];
                var amountReceiptable = $(amountReceiptableControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, "");

                $(parentPledge).find('.hdnGiftAmountMembership').val(parseFloat($(txtAmountMembershipControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, "")));
                valueChanged($(this));
                $(txtAmountMembershipControl).val(currencySymbol + addCommasonLoad(parseFloat($(txtAmountMembershipControl).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, "")).toFixed(2)));

                totalAmount = parseFloat(totalAmount) - parseFloat(previousMembershipAmount) + parseFloat(membershipAmount);
                $(totalAmountcontrol).val(currencySymbol + addCommasonLoad(totalAmount.toFixed(2)));

                calculateCurrentAmount(true);
            });

            $('.donationPledgeList').on('click', '.btnHouseholdOnFile', function () {
                var $this = $(this);
                parentPledge = $this.parents('.donationPledge');

                var selectedDonorId = $($(parentPledge).find('.autocompleteDonor')[0]).data('id');

                var pageInput = {
                    pageType: "webresource",
                    webresourceName: "msnfp_/webpages/contacthouseholdtilepopup.html",
                    data: encodeURIComponent("contactId=" + selectedDonorId)
                };
                var navigationOptions = {
                    target: 2,
                    width: 700,
                    height: 740,
                    position: 1
                };
                xrm.Navigation.navigateTo(pageInput, navigationOptions).then(
                    function success() {
                    },
                    function error() {
                    }
                );
            });

            $('.donationPledgeList').on('click', '.button-save', function () {
                xrm.Page.ui.clearFormNotification("svd");
                var $this = $(this);
                parentPledge = $this.parents('.donationPledge');

                var selectedDonorId = $($(parentPledge).find('.autocompleteDonor')[0]).data('id');
                if (selectedDonorId == null) {
                    var message = "A Donor has not been selected, would you like to continue?";

                    xrm.Utility.confirmDialog(message, ContinueSaveBatchGift);
                }
                else {
                    ContinueSaveBatchGift();
                }
            });

            $('.donationPledgeList').on('change', '.donationPledge input, .donationPledge select', function () {
                var $this = $(this);
                if (!$this.hasClass('txtFAAmount') && !$this.hasClass('ddlFundList'))
                    valueChanged($this);
            });

            $('input[name=searchDonationType]').change(function () {
                var $this = $(this);
                $('.newDonation, .searchDonationContact-container, .searchDonationOrganization-cotainer').hide();

                if ($this.val() == SearchDonationType.Constitute || $this.val() == SearchDonationType.Organization) {
                    loadAllDonationList();

                    if ($this.val() == SearchDonationType.Constitute) {
                        $('.searchDonationContact-container').show();
                    }
                    else {
                        $('.searchDonationOrganization-cotainer').show();
                    }
                }
                else if ($this.val() == SearchDonationType.NewConstitute || $this.val() == SearchDonationType.NewOrganization) {
                    //$('#txtNewInstitute').parent('div').removeClass('mandatory');
                    $('#txtNewInstitute').closest('div').removeClass('mandatory');
                    $('#txtNewInstitute').removeAttr('aria-required');
                    $('.tdInstitute').removeClass('mandatory');
                    $('.newDonation').show();

                    if ($this.val() == SearchDonationType.NewOrganization) {
                        $('.tdInstitute').addClass('mandatory');
                        //$('#txtNewInstitute').parent('div').addClass('mandatory');
                        $('#txtNewInstitute').closest('div').addClass('mandatory');
                        $('#txtNewInstitute').attr('aria-required', true);
                    }
                }
            });

            $('#searchDonationContact tbody').on('click', 'tr', function () {
                var selectedRowId = $($(this).find('input[type=hidden]')[0]).val();
                var donor = $.grep(donorList, function (e) { return e.id == selectedRowId; });
                if (donor != null && donor.length > 0) {
                    $(lastSearchDonorControl).val(donor[0].name).autocomplete('onValueChange');
                    $(lastSearchDonorControl).data('id', donor[0].id);
                }

                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                }
                else {
                    searchConstituteTable.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }
            });

            $('#searchDonationOrganization tbody').on('click', 'tr', function () {
                var selectedRowId = $($(this).find('input[type=hidden]')[0]).val();
                var donor = $.grep(donorList, function (e) { return e.id == selectedRowId; });
                if (donor != null && donor.length > 0) {
                    $(lastSearchDonorControl).val(donor[0].name).autocomplete('onValueChange');
                    $(lastSearchDonorControl).data('id', donor[0].id);
                }

                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                }
                else {
                    searchOrganizationTable.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }
            });



            // Modal content starts here.
            // Get the Link Existing Pledge Modal:
            var pledgeModal = document.getElementById("donorCommitmentsModal");

            // Get the <span> element that closes the modal:
            var closeButtonSpan = document.getElementsByClassName("closeBtn")[0];

            // When the user clicks on <span> (x), close the modal:
            if (!isNullOrUndefined(closeButtonSpan)) {
                closeButtonSpan.onclick = function () {
                    pledgeModal.style.display = "none";
                }
            }

            // When the user clicks anywhere outside of the modal, close it:
            window.onclick = function (event) {
                if (event.target == pledgeModal) {
                    pledgeModal.style.display = "none";
                }
            }

            // Modal content ends here.

            // Binding Search Table
            bindSearchTable();

            $('#btnCancelModal').click(function () {
                document.getElementById("donorCommitmentsModal").style.display = "none";
            });



            $('#btnComplete').click(function () {
                $('.existing-pledge .error-msg').hide();
                var selectedPledge = $('input[name=radioExistingPledge]:checked').val();


                if (selectedPledge == undefined || selectedPledge == '') {
                    $('.existing-pledge .error-msg').css("display", "block");
                }
                else {
                    if (activeSelectedRow != null && activeSelectedRow.length > 0) {
                        $(activeSelectedRow).find('input.hiddenDonorCommitmentId').val(selectedPledge);
                        document.getElementById("donorCommitmentsModal").style.display = "none";
                    }
                }

            });


            $('.donationPledgeList').on('click', ".btnPledgeOnFile", function () {

                var $this = $(this);
                parentPledge = $this.parents('.donationPledge');
                var selectedDonorId = $($(parentPledge).find('.autocompleteDonor')[0]).data('id');

                if (selectedDonorId != null) {

                    // clearing donor commitment list
                    searchTable.clear();

                    activeSelectedRow = parentPledge;

                    // loading list of donor commitments
                    loadRelatedPledge(selectedDonorId);

                    // displaying modal
                    $('#donorCommitmentsModal').css('display', 'block');

                    if (activeSelectedRow != null && activeSelectedRow.length > 0) {

                        // setting previously selected value
                        $("input[name='radioExistingPledge'][value='" + $(activeSelectedRow).find('input.hiddenDonorCommitmentId').val() + "']").prop("checked", true);
                    }
                }
            });


            $('#btnSelectClose').click(function () {
                var selectedVal = $('input[name=searchDonationType]:checked').val();
                if (selectedVal == SearchDonationType.Constitute || selectedVal == SearchDonationType.Organization) {
                    var selectedRow;
                    if (selectedVal == SearchDonationType.Constitute)
                        selectedRow = $('#searchDonationContact').find('tr.selected');
                    else
                        selectedRow = $('#searchDonationOrganization').find('tr.selected');

                    if (selectedRow != null && selectedRow.length > 0) {
                        selectedRow = selectedRow[0];
                        var selectedRowId = $($(selectedRow).find('input[type=hidden]')[0]).val();
                        var donor = $.grep(donorList, function (e) { return e.id == selectedRowId; });
                        if (donor != null && donor.length > 0) {
                            $(lastSearchDonorControl).val(donor[0].name).autocomplete('onValueChange');
                            $(lastSearchDonorControl).data('id', donor[0].id);

                            var $this = $(lastSearchDonorControl);
                            donorAutocompleteChange($this, donor[0].id);
                        }
                    }
                    $('.searchDonationMain').hide();
                }
                else {
                    $('.newDonation-error').hide();
                    if (validate($('.newDonation'))) {
                        var accountId = null;
                        if ($('#txtNewInstitute').val() != '') {
                            accountId = createAccount();

                            var hiddenId = "<input type='hidden' value='" + accountId + "' />";
                            searchOrganizationTable.row.add([
                                hiddenId + $('#txtNewInstitute').val(),
                                $('#txtNewFirstName').val() + ' ' + $('#txtNewLastName').val(),
                                $('#txtNewEmail').val(),
                                $('#txtNewPhone').val(),
                                $('#txtNewAddressLine1').val(),
                                $('#txtNewAddressCity').val(),
                                $('#txtNewAddressProvicne').val(),
                                $('#txtNewAddressPostalCode').val(),
                                false
                            ]).draw(false);
                        }
                        var contactId = createContact(accountId);

                        var hiddenContactId = "<input type='hidden' value='" + contactId + "' />";
                        searchConstituteTable.row.add([
                            hiddenContactId + $('#txtNewFirstName').val() + ' ' + $('#txtNewLastName').val(),
                            '',
                            $('#txtNewEmail').val(),
                            $('#txtNewPhone').val(),
                            $('#txtNewAddressLine1').val(),
                            $('#txtNewAddressCity').val(),
                            $('#txtNewAddressProvicne').val(),
                            $('#txtNewAddressPostalCode').val(),
                            false
                        ]).draw(false);

                        $('.autocompleteDonor').each(function () {
                            $(this).data('isupdated', 'true');
                        });

                        $(lastSearchDonorControl).autocomplete().clear();
                        loadDonorList();
                        bindDonorAutocomplete(lastSearchDonorControl);
                        $(lastSearchDonorControl).removeData('isupdated');

                        var selectedRowId = contactId;
                        if (selectedVal == SearchDonationType.NewOrganization) {
                            selectedRowId = accountId;

                            updatePrimaryContact(contactId, accountId);
                        }
                        var donor = $.grep(donorList, function (e) { return e.id == selectedRowId; });
                        if (donor != null && donor.length > 0) {
                            $(lastSearchDonorControl).val(donor[0].name).autocomplete('onValueChange');
                            $(lastSearchDonorControl).data('id', donor[0].id);

                            donorAutocompleteChange($(lastSearchDonorControl), donor[0].id);
                        }

                        $('.searchDonationMain').hide();
                    }
                    else {
                        $('.newDonation-error').show();
                        $('.newDonation-error').append('<p aria-label="Please fill mandatory fields">Please fill mandatory fields</p>');
                    }
                }

                $('#divDonationMain input[type=text]').val('');
            });

            isFormLoaded = true;

            if (donationPledgeList == undefined || donationPledgeList.length == 0) {
                if (formType == FormType.Create)
                    $('#tblDonationPledge').hide();
                else
                    addNewRow(null, true);
            }

            showHideCustomerFields();

            xrm.Page.getAttribute("modifiedon").addOnChange(createParentTransactionOnCreate);
            xrm.Page.getAttribute("msnfp_campaignid").addOnChange(campaignChange);
            xrm.Page.getAttribute("msnfp_designationid").addOnChange(designationChange);
            xrm.Page.getAttribute("transactioncurrencyid").addOnChange(getCurrencySymbol);
            xrm.Page.getAttribute("msnfp_batchcode").addOnChange(changeRelatedGiftsHeaderText);

            $('div#divFundAllocationIFrame').on('click', 'a.btnAdd', function () {
                var $this = $(this);
                if ($this.hasClass('btn-disabled'))
                    return;
                var fundFrame = $(this).closest('#divFundAllocationIFrame');
                enableButtons(fundFrame);
                disableRemovebutton(fundFrame);
            });

            $('div#divFundAllocationIFrame').on('click', 'a.btnRemove', function () {
                var $this = $(this);
                if ($this.hasClass('btn-disabled'))
                    return;
                var fundFrame = $(this).closest('#divFundAllocationIFrame');
                var giftAmount = parseFloat($(this).closest('.donationPledge').find('.hdnGiftAmount').val());

                enableButtons(fundFrame);
                var parentTr = $this.closest('tr');
                if (parentTr.attr('data-id') != null) {
                    removedAllocations.push(parentTr.attr('data-id'));
                    deleteFACount = deleteFACount + 1;
                }

                parentTr.remove();
                calculateAmount(fundFrame, giftAmount);
            });

            $('div#divFundAllocationIFrame').on('change', 'input.txtFAAmount', function (e) {
                var fundFrame = $(this).closest('#divFundAllocationIFrame');
                var giftAmount = parseFloat($(this).closest('.donationPledge').find('.hdnGiftAmount').val());

                enableButtons(fundFrame);
                var $this = $(this);
                $('.error-msg').hide();
                var rowAmount = getTotalAmount(fundFrame);
                if (rowAmount > giftAmount) {
                    $('.error-msg').append('<p>Amount should be less then first row.</p>');
                    $('.error-msg').show();
                    $this.val('');
                    setTimeout(function () {
                        $this.focus();
                    }, 100);
                }
                else {
                    calculateAmount(fundFrame, giftAmount);
                }
            });

            $('div#divFundAllocationIFrame').on('change', 'select.ddlFundList', function (e) {
                var fundFrame = $(this).closest('#divFundAllocationIFrame');
                enableButtons(fundFrame);
            });

            $('div#divFundAllocationIFrame').on('click', '#btnCancel', function () {
                var fundFrame = $(this).closest('#divFundAllocationIFrame');
                fundFrame.find('.table-main > tbody').empty();

                var addedRow = fundFrame.closest('.donationPledge');
                var currentGiftAmount = parseFloat(addedRow.find('.hdnGiftAmount').val());
                var donationPledgeID = addedRow.find('.hiddenPledgeId').val();
            });
        });

        function removeSelectedDonationConfirmation(parentPledge) {
            var hiddenPledgeIdControl = $(parentPledge).find('.hiddenPledgeId')[0];
            var pledgeId = $(hiddenPledgeIdControl).val();

            if (pledgeId != null && pledgeId != '') {
                XrmServiceUtility.DeleteRecord(pledgeId, 'msnfp_transactions');
            }
            parentPledge.remove();
            // Note that we don't save below as the setGiftCountonBatchGift() function will save. Doing it in both spots will cause an error as it tries to save twice at the same time.
            calculateCurrentAmount(false);
            setGiftCountonBatchGift();
            $('.searchDonationMain').hide();

        }



        function bindSearchTable() {
            searchTable = $('#searchResult').DataTable({
                "info": false,
                "bPaginate": true,
                "bFilter": false,
                "bLengthChange": false,
                "sPaginationType": "numbers",
                "iDisplayLength": 5,
                "columnDefs": [{
                    orderable: false, targets: [0]
                }],
                "order": [[1, "asc"]]
            });
        }






        function loadRelatedPledge(donorId) {
            select = "msnfp_donorcommitments?$select=msnfp_donorcommitmentid,msnfp_bookdate,msnfp_name,msnfp_totalamount,msnfp_totalamount_balance,statecode";
            filter = "&$filter=statecode eq 0 and _msnfp_customerid_value eq " + donorId + "";
            var result = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + select + filter);

            if (result === null || typeof (result) === "undefined") {
                result = [];
                searchTable.row.add([
                    "",
                    "",
                    "No pledges on file",
                    "",
                    ""
                ]).draw(false);
            }

            $(result).each(function () {
                var radioButton = "<input type='radio' value='" + this.msnfp_donorcommitmentid + "' name='radioExistingPledge' />";
                var date = new Date(this.msnfp_bookdate).getMonth() + 1 + '/' + new Date(this.msnfp_bookdate).getDate() + '/' + new Date(this.msnfp_bookdate).getFullYear();
                searchTable.row.add([
                    radioButton,
                    date,
                    this.msnfp_name,
                    currencySymbol + addCommaToEvery3Digits(this.msnfp_totalamount),
                    formatCurrencyValue(this.msnfp_totalamount_balance)
                ]).draw(false);
            });


            if (result.length > 0)
                $('.existing-pledge').css("display", "block");
        }

        function addCommaToEvery3Digits(num) {
            return num.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
        }

        function formatCurrencyValue(num) {
            var retval = "";

            if (!isNullOrUndefined(num))
                retval = currencySymbol + addCommaToEvery3Digits(num);

            return retval;
        }



        function showHideCustomerFields() {
            if (configRec.autocreateorganizationconstituent != null && configRec.autocreateorganizationconstituent) {
                $('.autocompleteDonor').closest('.form-control').removeClass('mandatory');
                $('.autocompleteDonor').removeAttr('aria-required');
                $('.donationPledge').find('.txtFirstName').closest('.form-control').addClass('mandatory');
                $('.donationPledge').find('.txtFirstName').attr('aria-required', true);
                $('.donationPledge').find('.txtLastName').closest('.form-control').addClass('mandatory');
                $('.donationPledge').find('.txtLastName').attr('aria-required', true);
                $('.donationPledge').find('.txtStreet1').closest('.form-control').addClass('mandatory');
                $('.donationPledge').find('.txtStreet1').attr('aria-required', true);
                $('.donationPledge').find('.txtCity').closest('.form-control').addClass('mandatory');
                $('.donationPledge').find('.txtCity').attr('aria-required', true);
                $('.donationPledge').find('.txtProvince').closest('.form-control').addClass('mandatory');
                $('.donationPledge').find('.txtProvince').attr('aria-required', true);
                $('.donationPledge').find('.txtPostalCode').closest('.form-control').addClass('mandatory');
                $('.donationPledge').find('.txtPostalCode').attr('aria-required', true);
            }
            else {
                $('.autocompleteDonor').closest('.form-control').addClass('mandatory');
                $('.autocompleteDonor').attr('aria-required', true);
                if (configRec.msnfp_transaction_mandatecustomer == false) {
                    $('.autocompleteDonor').closest('.form-control').removeClass('mandatory');
                    $('.autocompleteDonor').removeAttr('aria-required');
                }
                $('.donationPledge').find('.txtFirstName').closest('.form-control').removeClass('mandatory');
                $('.donationPledge').find('.txtFirstName').removeAttr('aria-required');
                $('.donationPledge').find('.txtLastName').closest('.form-control').removeClass('mandatory');
                $('.donationPledge').find('.txtLastName').removeAttr('aria-required');
                $('.donationPledge').find('.txtStreet1').closest('.form-control').removeClass('mandatory');
                $('.donationPledge').find('.txtStreet1').removeAttr('aria-required');
                $('.donationPledge').find('.txtCity').closest('.form-control').removeClass('mandatory');
                $('.donationPledge').find('.txtCity').removeAttr('aria-required');
                $('.donationPledge').find('.txtProvince').closest('.form-control').removeClass('mandatory');
                $('.donationPledge').find('.txtProvince').removeAttr('aria-required');
                $('.donationPledge').find('.txtPostalCode').closest('.form-control').removeClass('mandatory');
                $('.donationPledge').find('.txtPostalCode').removeAttr('aria-required');
            }
        }

        function manageTab(current) {
            $(this).children('label').each(function () {
                if (this == current) {
                    $(this).toggleClass('back-color');
                }
                else {
                    $(this).removeClass('back-color');
                }
            });
        }

        function campaignChange() {
            var campaignRec = xrm.Page.data.entity.attributes.get("msnfp_campaignid").getValue();
            if (campaignRec != null) {

            }
        }

        function designationChange() {
            var designationRec = xrm.Page.data.entity.attributes.get("msnfp_designationid").getValue();
            if (designationRec != null) {

            }
        }

        // Note that when creating the transaction, all fields should be based on the donor and "Payment" fields
        function createParentTransactionOnCreate() {
            formType = xrm.Page.ui.getFormType();
            var batchType = xrm.Page.data.entity.attributes.get("msnfp_batchcode").getValue();
            //844060001 = Single Payment Multiple Gifts
            if (!isNullOrUndefined(batchType) && batchType == 844060001) {
                // If this form is of type create, we need to create the parent transaction:
                // TODO: Check that the number of current associated credit transactions is 0.
                //if (formType === FormType.Create) {
                // Make sure this field is blank:
                if (isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_parenttransactionid").getValue())) {
                    // Then create the parent gift batch transaction record:
                    var eentity = {};
                    // Title:
                    eentity["msnfp_name"] = xrm.Page.data.entity.attributes.get("msnfp_identifier").getValue();

                    // Get the donor, first name and last name:
                    if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_customerid"))) {
                        var donorPayer = xrm.Page.data.entity.attributes.get("msnfp_customerid").getValue();
                        if (!isNullOrUndefined(donorPayer)) {
                            var donorType = xrm.Page.data.entity.attributes.get("msnfp_customerid").getValue()[0].entityType;
                            var donorID = xrm.Page.data.entity.attributes.get("msnfp_customerid").getValue()[0].id;
                            if (donorType == "account") {
                                eentity["msnfp_CustomerId_account@odata.bind"] = "/accounts(" + XrmUtility.CleanGuid(donorID) + ")";
                                // Now get the other fields:
                                var eselect = "accounts(" + XrmUtility.CleanGuid(donorID) + ")?$select=accountid,name,address1_line1,address1_line2,address1_line3,address1_city,address1_stateorprovince,address1_country,address1_postalcode,telephone1,telephone2,telephone3,emailaddress1,_primarycontactid_value,_msnfp_primarymembershipid_value,";
                                var parentDonationDonor = XrmServiceUtility.ExecuteQueryWithExpand(XrmServiceUtility.GetWebAPIUrl() + eselect);

                                if (!isNullOrUndefined(parentDonationDonor)) {
                                    if (parentDonationDonor.primarycontactid != null) {
                                        eentity["msnfp_firstname"] = parentDonationDonor.primarycontactid.firstname;
                                        eentity["msnfp_lastname"] = parentDonationDonor.primarycontactid.lastname;
                                    }

                                    eentity["msnfp_organizationname"] = parentDonationDonor.name;
                                    eentity["msnfp_emailaddress1"] = parentDonationDonor.emailaddress1;
                                    eentity["msnfp_telephone1"] = parentDonationDonor.telephone1;
                                    eentity["msnfp_billing_line1"] = parentDonationDonor.address1_line1;
                                    eentity["msnfp_billing_line2"] = parentDonationDonor.address1_line2;
                                    eentity["msnfp_billing_line3"] = parentDonationDonor.address1_line3;
                                    eentity["msnfp_billing_city"] = parentDonationDonor.address1_city;
                                    eentity["msnfp_billing_stateorprovince"] = parentDonationDonor.address1_stateorprovince;
                                    eentity["msnfp_billing_postalcode"] = parentDonationDonor.address1_postalcode;
                                    eentity["msnfp_billing_country"] = parentDonationDonor.address1_country;
                                }
                            }
                            else if (donorType == "contact") {
                                eentity["msnfp_CustomerId_contact@odata.bind"] = "/contacts(" + XrmUtility.CleanGuid(donorID) + ")";
                                // Now get the other fields:
                                var eselect = "contacts(" + XrmUtility.CleanGuid(donorID) + ")?$select=contactid,firstname,lastname,fullname,address1_line1,address1_line2,address1_line3,address1_city,address1_stateorprovince,address1_country,address1_postalcode,telephone1,emailaddress1,";
                                var parentDonationDonor = XrmServiceUtility.ExecuteQueryWithExpand(XrmServiceUtility.GetWebAPIUrl() + eselect);

                                if (!isNullOrUndefined(parentDonationDonor)) {
                                    eentity["msnfp_firstname"] = parentDonationDonor.firstname;
                                    eentity["msnfp_lastname"] = parentDonationDonor.lastname;
                                    eentity["msnfp_emailaddress1"] = parentDonationDonor.emailaddress1;
                                    eentity["msnfp_telephone1"] = parentDonationDonor.telephone1;
                                    eentity["msnfp_billing_line1"] = parentDonationDonor.address1_line1;
                                    eentity["msnfp_billing_line2"] = parentDonationDonor.address1_line2;
                                    eentity["msnfp_billing_line3"] = parentDonationDonor.address1_line3;
                                    eentity["msnfp_billing_city"] = parentDonationDonor.address1_city;
                                    eentity["msnfp_billing_stateorprovince"] = parentDonationDonor.address1_stateorprovince;
                                    eentity["msnfp_billing_postalcode"] = parentDonationDonor.address1_postalcode;
                                    eentity["msnfp_billing_country"] = parentDonationDonor.address1_country;
                                }
                            }
                        }
                    }

                    // Get all currency fields.
                    // Amount Receipted:
                    if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_amount_receipted").getValue())) {
                        eentity["msnfp_amount_receipted"] = parseFloat(xrm.Page.data.entity.attributes.get("msnfp_amount_receipted").getValue());
                    }
                    // Non-receiptable:
                    if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_amount_nonreceiptable").getValue())) {
                        eentity["msnfp_amount_nonreceiptable"] = parseFloat(xrm.Page.data.entity.attributes.get("msnfp_amount_nonreceiptable").getValue());
                    }
                    // Membership:
                    if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_amount_membership").getValue())) {
                        eentity["msnfp_amount_membership"] = parseFloat(xrm.Page.data.entity.attributes.get("msnfp_amount_membership").getValue());
                    }
                    // Tax:
                    if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_amount_tax").getValue())) {
                        eentity["msnfp_amount_tax"] = parseFloat(xrm.Page.data.entity.attributes.get("msnfp_amount_tax").getValue());
                    }
                    // Total:
                    if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_amount").getValue())) {
                        eentity["msnfp_amount"] = parseFloat(xrm.Page.data.entity.attributes.get("msnfp_amount").getValue());
                    }

                    // Get other required fields.
                    // Received/Deposit Date:
                    if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_receiveddate").getValue())) {
                        eentity["msnfp_receiveddate"] = new Date(xrm.Page.data.entity.attributes.get("msnfp_receiveddate").getValue()).toUTCString();
                    }

                    // Book Date:
                    var msnfp_Date = xrm.Page.getAttribute('msnfp_bookdate').getValue();
                    if (!isNullOrUndefined(msnfp_Date)) {
                        eentity["msnfp_bookdate"] = msnfp_Date;
                    }

                    // Source - phone, online, etc.
                    if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_dataentrysource").getValue())) {
                        eentity["msnfp_dataentrysource"] = xrm.Page.data.entity.attributes.get("msnfp_dataentrysource").getValue();
                    }

                    // Campaign:
                    if (xrm.Page.data.entity.attributes.get("msnfp_campaignid").getValue() != null) {
                        var parentCampaignID = XrmUtility.CleanGuid(xrm.Page.data.entity.attributes.get("msnfp_campaignid").getValue()[0].id);
                        if (!isNullOrUndefined(parentCampaignID)) {
                            eentity["msnfp_OriginatingCampaignId@odata.bind"] = "/campaigns(" + parentCampaignID + ")";
                        }
                    }

                    // Appeal:
                    if (xrm.Page.data.entity.attributes.get("msnfp_appealid").getValue() != null) {
                        var parentAppealID = XrmUtility.CleanGuid(xrm.Page.data.entity.attributes.get("msnfp_appealid").getValue()[0].id);
                        if (!isNullOrUndefined(parentAppealID)) {
                            eentity["msnfp_AppealId@odata.bind"] = "/msnfp_appeals(" + parentAppealID + ")";
                        }
                    }

                    // Package:
                    if (xrm.Page.data.entity.attributes.get("msnfp_packageid").getValue() != null) {
                        var parentPackageID = XrmUtility.CleanGuid(xrm.Page.data.entity.attributes.get("msnfp_packageid").getValue()[0].id);
                        if (!isNullOrUndefined(parentPackageID)) {
                            eentity["msnfp_PackageId@odata.bind"] = "/msnfp_packages(" + parentPackageID + ")";
                        }
                    }

                    // Designation:
                    if (xrm.Page.data.entity.attributes.get("msnfp_designationid").getValue() != null) {
                        var parentDesignationID = XrmUtility.CleanGuid(xrm.Page.data.entity.attributes.get("msnfp_designationid").getValue()[0].id);
                        if (!isNullOrUndefined(parentDesignationID)) {
                            eentity["msnfp_DesignationId@odata.bind"] = "/msnfp_designations(" + parentDesignationID + ")";
                        }
                    }

                    // Config:
                    var configuration = xrm.Page.data.entity.attributes.get("msnfp_configurationid");
                    if (!isNullOrUndefined(configuration)) {
                        var configurationValue = configuration.getValue();
                        if (!isNullOrUndefined(configurationValue)) {
                            var configurationValueID = XrmUtility.CleanGuid(configurationValue[0].id);
                            eentity["msnfp_ConfigurationId@odata.bind"] = "/msnfp_configurations(" + configurationValueID + ")";
                        }
                    }

                    // Set the owner:
                    var teamOwner = xrm.Page.data.entity.attributes.get("msnfp_teamownerid");
                    if (!isNullOrUndefined(teamOwner)) {
                        var teamOwnerValue = teamOwner.getValue();
                        if (!isNullOrUndefined(teamOwnerValue)) {
                            var teamOwnerValueID = XrmUtility.CleanGuid(teamOwnerValue[0].id);
                            eentity["ownerid@odata.bind"] = "/teams(" + teamOwnerValueID + ")";
                        }
                    }

                    // Set it as active:
                    eentity["statuscode"] = parseInt(1);

                    // Set the parent type as donation, the children will be credit:
                    eentity["msnfp_typecode"] = parseInt(844060000);

                    var parentID;
                    console.log("Creating Parent Transaction");

                    var qry = XrmServiceUtility.GetWebAPIUrl() + "msnfp_transactions";
                    parentID = XrmServiceUtility.CreateRecord(qry, eentity); //, saveSuccessParentTransaction, errorFailure);
                    console.log("Transaction ID - " + parentID);

                    // Now link the transaction to this gift batch record:
                    if (!isNullOrUndefined(parentID)) {
                        console.log("Updating this gift batch - " + xrm.Page.data.entity.getId().replace('{', '').replace('}', ''));
                        var giftBatchEntity = {};
                        giftBatchEntity["msnfp_ParentTransactionId@odata.bind"] = "/msnfp_transactions(" + XrmUtility.CleanGuid(parentID) + ")";
                        var qry = XrmServiceUtility.GetWebAPIUrl() + "/msnfp_giftbatchs(" + xrm.Page.data.entity.getId().replace('{', '').replace('}', '') + ")";
                        XrmServiceUtility.UpdateRecord(qry, giftBatchEntity, saveSuccessParentTransaction, errorFailure);
                    }
                }
                else {
                    // Updating existing Parent Transaction
                    if (formType === FormType.Update) {

                        if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_parenttransactionid").getValue())) {

                            var parentTransactionID = xrm.Page.data.entity.attributes.get("msnfp_parenttransactionid").getValue()[0].id;

                            var parentTransaction = {};

                            // Get all currency fields.
                            // Amount Receipted:
                            if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_amount_receipted").getValue())) {
                                parentTransaction["msnfp_amount_receipted"] = parseFloat(xrm.Page.data.entity.attributes.get("msnfp_amount_receipted").getValue());
                            }
                            else
                                parentTransaction["msnfp_amount_receipted"] = null;

                            // Non-receiptable:
                            if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_amount_nonreceiptable").getValue())) {
                                parentTransaction["msnfp_amount_nonreceiptable"] = parseFloat(xrm.Page.data.entity.attributes.get("msnfp_amount_nonreceiptable").getValue());
                            }
                            else
                                parentTransaction["msnfp_amount_nonreceiptable"] = null;

                            // Membership:
                            if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_amount_membership").getValue())) {
                                parentTransaction["msnfp_amount_membership"] = parseFloat(xrm.Page.data.entity.attributes.get("msnfp_amount_membership").getValue());
                            }
                            else
                                parentTransaction["msnfp_amount_membership"] = null;

                            // Tax:
                            if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_amount_tax").getValue())) {
                                parentTransaction["msnfp_amount_tax"] = parseFloat(xrm.Page.data.entity.attributes.get("msnfp_amount_tax").getValue());
                            }
                            else
                                parentTransaction["msnfp_amount_tax"] = null;

                            // Total:
                            if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_amount").getValue())) {
                                parentTransaction["msnfp_amount"] = parseFloat(xrm.Page.data.entity.attributes.get("msnfp_amount").getValue());
                            }
                            else
                                parentTransaction["msnfp_amount"] = null;

                            var qry = XrmServiceUtility.GetWebAPIUrl() + "msnfp_transactions(" + XrmUtility.CleanGuid(parentTransactionID) + ")";
                            XrmServiceUtility.UpdateRecord(qry, parentTransaction);
                        }
                    }
                }
                //}
            }
        }

        function saveSuccessParentTransaction() {
        }

        // If we switch to "Single Payment Multiple Gifts", we will switch the header text to show the word "Credit". This is strictly a visual change.
        function changeRelatedGiftsHeaderText() {
            var batchType = xrm.Page.data.entity.attributes.get("msnfp_batchcode").getValue();
            //844060001 = Single Payment Multiple Gifts
            if (!isNullOrUndefined(batchType) && batchType == 844060001) {
                $("#h2RelatedGifts").text("Related Credits");
                $("#h2ProcessGifts").text("Process Credits");
            }
            // Default of donation:
            else {
                $("#h2RelatedGifts").text("Related Gifts");
                $("#h2ProcessGifts").text("Process Gifts");
            }
        }

        function bindConfiguration() {
            var configID = null;
            if (!isNullOrUndefined(xrm.Page.getControl("msnfp_configurationid"))) {
                var configValue = xrm.Page.data.entity.attributes.get("msnfp_configurationid").getValue();
                if (!isNullOrUndefined(configValue))
                    configID = configValue[0].id;
            }
            else {
                var currentuserID = MissionFunctions.GetCurrentUserID();

                console.log("currentuserID: " + currentuserID);

                var userSelect = "systemusers?$select=systemuserid,_msnfp_configurationid_value"
                userSelect += "&$filter=systemuserid eq " + currentuserID;
                var user = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + userSelect);
                user = user[0];

                if (!isNullOrUndefined(user._msnfp_configurationid_value))
                    configID = user._msnfp_configurationid_value;
            }

            if (!isNullOrUndefined(configID)) {
                var select = "msnfp_configurations?$select=msnfp_configurationid,msnfp_batch_donation,";
                select += "msnfp_batch_cash,";
                select += "msnfp_batch_cheque,msnfp_batch_inkind,";
                select += "msnfp_batch_other,";
                select += "msnfp_transaction_mandatecustomer,msnfp_batch_wire_transfer,";
                select += "msnfp_batch_enablemembershiponly,msnfp_batch_enablegiftaid,msnfp_batch_paymenttype,msnfp_batch_inhonour,msnfp_event_depositdate,";
                select += "msnfp_batch_enabledesignationallocation,msnfp_tran_enablegiftaid,msnfp_batch_extcreditcard,";
                select += "msnfp_label_bankach,msnfp_label_cash,msnfp_label_cheque,msnfp_label_creditcard,";
                select += "msnfp_label_transactiondescription,msnfp_label_amount_receipted,msnfp_label_amount_nonreceiptable,msnfp_label_amount,msnfp_label_amount_tax,msnfp_label_amount_membership,";
                select += "msnfp_label_donation, msnfp_label_donationschedule, msnfp_label_extcreditcard,";
                select += "msnfp_label_inkind,msnfp_label_membership,msnfp_label_other,msnfp_label_pledge,msnfp_label_pledgeschedule,";
                select += "msnfp_label_property,msnfp_label_recurringdonation,msnfp_label_securities,msnfp_label_softcredit,";
                select += "msnfp_label_wire,msnfp_batch_nonreceiptable,msnfp_batch_sourcetype,msnfp_label_inhonourmemoryof,";
                select += "msnfp_label_telephone1,msnfp_label_telephone2,msnfp_label_telephone3,msnfp_label_line1,msnfp_label_line2,msnfp_label_line3,";
                select += "msnfp_label_city,msnfp_label_stateorprovince,msnfp_label_postalcode,msnfp_label_country,msnfp_batch_showreceiptpreference,";
                select += "msnfp_label_receiptpreference,msnfp_updatereceiptpreference";
                var filter = "&$filter=statuscode eq 1 and msnfp_configurationid eq " + configID;
                console.debug(XrmServiceUtility.GetWebAPIUrl() + select + filter);
                configRec = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + select + filter);
                if (configRec != null && configRec.length > 0) {
                    configRec = configRec[0];

                    if (configRec.msnfp_batch_cash == false) {
                        $('#radioCash').next('label').remove();
                        $('#radioCash').remove();
                    }
                    else if (!isNullOrUndefined(configRec.msnfp_label_cash))
                        $('#radioCash').next('label')[0].innerText = configRec.msnfp_label_cash;

                    if (configRec.msnfp_batch_cheque == false) {
                        $('#radioCheque').next('label').remove();
                        $('#radioCheque').remove();
                    }
                    else if (!isNullOrUndefined(configRec.msnfp_label_cheque))
                        $('#radioCheque').next('label')[0].innerText = configRec.msnfp_label_cheque;

                    if (!configRec.hasOwnProperty("msnfp_batch_bank") || configRec.msnfp_batch_bank == false) {
                        $('#radioBankACH').next('label').remove();
                        $('#radioBankACH').remove();
                    }
                    else if (!isNullOrUndefined(configRec.msnfp_label_bankach))
                        $('#radioBankACH').next('label')[0].innerText = configRec.msnfp_label_bankach;

                    if (configRec.msnfp_batch_inkind == false) {
                        $('#radioInKind').next('label').remove();
                        $('#radioInKind').remove();
                    }
                    else if (!isNullOrUndefined(configRec.msnfp_label_inkind))
                        $('#radioInKind').next('label')[0].innerText = configRec.msnfp_label_inkind;

                    if (configRec.msnfp_batch_other == false) {
                        $('#radioOther').next('label').remove();
                        $('#radioOther').remove();
                    }
                    else if (!isNullOrUndefined(configRec.msnfp_label_other))
                        $('#radioOther').next('label')[0].innerText = configRec.msnfp_label_other;

                    if (configRec.msnfp_batch_wire_transfer == false) {
                        $('#radioWireTransfer').next('label').remove();
                        $('#radioWireTransfer').remove();
                    }
                    else if (!isNullOrUndefined(configRec.msnfp_label_wire))
                        $('#radioWireTransfer').next('label')[0].innerText = configRec.msnfp_label_wire;

                    if (configRec.msnfp_batch_extcreditcard == false) {
                        $('#radioExtCreditCard').next('label').remove();
                        $('#radioExtCreditCard').remove();
                    }
                    else if (!isNullOrUndefined(configRec.msnfp_label_extcreditcard))
                        $('#radioExtCreditCard').next('label')[0].innerText = configRec.msnfp_label_extcreditcard;

                    if (configRec.msnfp_batch_enabledesignationallocation == true) {
                        $('#divFundAllocationIFrame').show();
                    }
                    else {
                        $('#divFundAllocationIFrame').hide();
                    }

                }
            }
        }

        function bindChangeEvent() {
            $('input[name=paymentType]').change(function () {
                var selectedVal = $('input[name=paymentType]:checked').val();
                xrm.Page.getAttribute('msnfp_gifttypecode').setValue(parseInt(selectedVal));
            });

            $('input[name=giftSource]').change(function () {
                var selectedVal = $('input[name=giftSource]:checked').val();
                xrm.Page.getAttribute('msnfp_dataentrysource').setValue(parseInt(selectedVal));
            });

            $('#txtDate').change(function () {
                var date = new Date($('#txtDate').val());
                date.setHours(0, 0, 0, 0);
                xrm.Page.getAttribute('msnfp_bookdate').setValue(date);
            });
        }

        function loadBatchGiftData() {
            var giftType = xrm.Page.getAttribute('msnfp_gifttypecode').getValue();
            $("input[name=paymentType][value='" + giftType + "']").prop("checked", true);


            var giftSource = xrm.Page.getAttribute('msnfp_dataentrysource').getValue();
            $("input[name=giftSource][value='" + giftSource + "']").prop("checked", true);

            if (xrm.Page.getAttribute('msnfp_bookdate').getValue() != null) {
                var today = xrm.Page.getAttribute('msnfp_bookdate').getValue();
                today = getFormattedDate(today);
                $('#txtDate').val(today);
            }


        }

        function ContinueSaveBatchGift() {
            var errorMessage = $(parentPledge).find('.error-msg')[0];
            $(errorMessage).html('');
            $(errorMessage).hide();
            var message = validate(parentPledge);
            if (message == "") {
                var entity = {};

                entity["msnfp_GiftBatchId@odata.bind"] = "/msnfp_giftbatchs(" + id + ")";

                var batchType = xrm.Page.data.entity.attributes.get("msnfp_batchcode").getValue();
                //844060001 = Single Payment Multiple Gifts
                if (!isNullOrUndefined(batchType) && batchType == 844060001) {
                    if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_customerid"))) {
                        var donorPayer = xrm.Page.data.entity.attributes.get("msnfp_customerid").getValue();
                        if (!isNullOrUndefined(donorPayer)) {
                            var donorType = xrm.Page.data.entity.attributes.get("msnfp_customerid").getValue()[0].entityType;
                            var donorID = xrm.Page.data.entity.attributes.get("msnfp_customerid").getValue()[0].id;

                            if (donorType == "account")
                                entity["msnfp_RelatedCustomerId_account@odata.bind"] = "/accounts(" + XrmUtility.CleanGuid(donorID) + ")";
                            else if (donorType == "contact")
                                entity["msnfp_RelatedCustomerId_contact@odata.bind"] = "/contacts(" + XrmUtility.CleanGuid(donorID) + ")";
                        }
                    }


                    var selectedDonorId = $($(parentPledge).find('.autocompleteDonor')[0]).data('id');
                    var selectedDonor = $.grep(donorList, function (e) { return e.id == selectedDonorId; });
                    if (selectedDonor != null && selectedDonor.length > 0) {
                        if (selectedDonor[0].isAccount)
                            entity["msnfp_CustomerId_account@odata.bind"] =
                                "/accounts(" + selectedDonorId + ")";
                        else
                            entity["msnfp_CustomerId_contact@odata.bind"] =
                                "/contacts(" + selectedDonorId + ")";
                    }

                    // We set the type to Credit for this child record:
                    entity["msnfp_typecode"] = parseInt(844060001);

                    // We then match this record to the parent:
                    if (!isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_parenttransactionid")) && !isNullOrUndefined(xrm.Page.data.entity.attributes.get("msnfp_parenttransactionid").getValue())) {
                        entity["msnfp_ParentTransactionId@odata.bind"] = "/msnfp_transactions(" + XrmUtility.CleanGuid(xrm.Page.data.entity.attributes.get("msnfp_parenttransactionid").getValue()[0].id) + ")";
                    }

                }
                else {
                    var selectedDonorId = $($(parentPledge).find('.autocompleteDonor')[0]).data('id');
                    var selectedDonor = $.grep(donorList, function (e) { return e.id == selectedDonorId; });
                    if (selectedDonor != null && selectedDonor.length > 0) {
                        if (selectedDonor[0].isAccount)
                            entity["msnfp_CustomerId_account@odata.bind"] =
                                "/accounts(" + selectedDonorId + ")";
                        else
                            entity["msnfp_CustomerId_contact@odata.bind"] =
                                "/contacts(" + selectedDonorId + ")";
                    }

                    // We set the type to Donation:
                    entity["msnfp_typecode"] = parseInt(844060000);

                }


                var amount = $($(parentPledge).find('.txtAmount')[0]).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, "");
                var amountNonReceiptable = 0;
                var amountMembership = 0;
                var amountTotal = $($(parentPledge).find('.txtAmountTotal')[0]).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, "");

                entity["msnfp_amount_receipted"] = parseFloat(amount);

                // don't copy the Non-Receiptable amount over if the Gift Type is Stock/Securities
                var giftType = $($(parentPledge).find('.ddlGiftType')[0]).val();
                if (!isNonReceiptableHidden && giftType != 844060006) {
                    if (!isNullOrUndefined($($(parentPledge).find('.txtAmountNonReceiptable')[0]).val()))
                        amountNonReceiptable = $($(parentPledge).find('.txtAmountNonReceiptable')[0]).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, "");
                    entity["msnfp_amount_nonreceiptable"] = parseFloat(amountNonReceiptable);
                }

                if (!isAmountMembershipHidden) {
                    if (!isNullOrUndefined($($(parentPledge).find('.txtAmountMembership')[0]).val()))
                        amountMembership = $($(parentPledge).find('.txtAmountMembership')[0]).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, "");
                    entity["msnfp_amount_membership"] = parseFloat(amountMembership);
                }

                entity["msnfp_amount"] = parseFloat(amountTotal);

                if (!isNullOrUndefined($($(parentPledge).find('.txtDescription')[0]))) {
                    entity["msnfp_transactiondescription"] = $(parentPledge).find('.txtDescription')[0].value;
                }

                var msnfp_Date = xrm.Page.getAttribute('msnfp_bookdate').getValue();
                if (!isNullOrUndefined(msnfp_Date)) {
                    entity["msnfp_bookdate"] = msnfp_Date;
                }

                var selectedConstituteId = $($(parentPledge).find('.autocompleteConstitute')[0]).data('id');
                if (selectedConstituteId != null && selectedConstituteId != '')
                    entity["msnfp_RelatedConstituentId@odata.bind"] = "/contacts(" + selectedConstituteId + ")";

                var declarationDelivered = $($(parentPledge).find('.ddlDeclarationDelivered')[0]).val();
                if (declarationDelivered != 0) {
                    entity["msnfp_ga_deliverycode"] = parseInt(declarationDelivered);
                }
                else
                    entity["msnfp_ga_deliverycode"] = null;

                if (!isGiftTypeHidden) {
                    var paymentType = $($(parentPledge).find('.ddlGiftType')[0]).val();
                    entity["msnfp_paymenttypecode"] = parseInt(paymentType);
                    if (paymentType == PaymentType.Cheque || paymentType == PaymentType.WireTransfer) {
                        var chequeNumberControl = $(parentPledge).find('.txtChequeNumber')[0];
                        entity["msnfp_chequenumber"] = $(chequeNumberControl).val();
                    }
                    else if (paymentType == PaymentType.CreditDebit) {
                        // NFP CHANGE: entity["statuscode"] = 844060000;
                        entity["msnfp_chargeoncreate"] = false;
                    }
                }
                else {
                    // IsGiftType is controlled by configuration and can be false
                    // In this case set to value of the gift batch record instead
                    entity["msnfp_chequenumber"] = $($(parentPledge).find('.txtChequeNumber')[0]).val();
                    entity["msnfp_paymenttypecode"] = xrm.Page.data.entity.attributes.get("msnfp_gifttypecode").getValue();
                }

                if (!isDepositeDateHidden) {
                    var txtDepositeDateControl = $(parentPledge).find('.txtDepositeDate')[0];
                    if (!isNullOrUndefined(txtDepositeDateControl)) {
                        var dDate = xrm.Page.data.entity.attributes.get("msnfp_receiveddate");
                        if (!isNullOrUndefined(dDate)) {
                            var dateValue = xrm.Page.data.entity.attributes.get("msnfp_receiveddate").getValue();
                            if (!isNullOrUndefined($(txtDepositeDateControl).val()))
                                entity["msnfp_receiveddate"] = new Date($(txtDepositeDateControl).val());
                            else if (!isNullOrUndefined(dateValue))
                                entity["msnfp_receiveddate"] = new Date(dateValue);
                        }
                    }
                }

                var selectedCampaignId = $($(parentPledge).find('.autoCompleteCampaign')[0]).data('id');

                if (!isNullOrUndefined(selectedCampaignId))
                    entity["msnfp_OriginatingCampaignId@odata.bind"] = "/campaigns(" + selectedCampaignId + ")";

                var selectedDesignationId = $($(parentPledge).find('.autoCompleteDesignation')[0]).data('id');

                if (!isNullOrUndefined(selectedDesignationId))
                    entity["msnfp_DesignationId@odata.bind"] = "/msnfp_designations(" + selectedDesignationId + ")";

                if (!isGiftSourceHidden) {
                    var selectedSource = $($(parentPledge).find('.ddlGiftSource')[0]).val();
                    if (selectedSource != '')
                        entity["msnfp_dataentrysource"] = parseInt(selectedSource);
                }
                else {
                    // set to one selected on the gift batch
                    entity["msnfp_dataentrysource"] = xrm.Page.getAttribute('msnfp_dataentrysource').getValue();
                }

                if (!isReceiptPreferenceHidden && configRec.msnfp_updatereceiptpreference) {
                    var selectedPreference = $($(parentPledge).find('.ddlReceiptPreference')[0]).val();

                    console.log("selectedPreference = " + selectedPreference);

                    if (selectedPreference != '')
                        entity["msnfp_receiptpreferencecode"] = parseInt(selectedPreference);
                }

                var selectedHouseholdRelationship = $($(parentPledge).find('.ddlHouseholdRelationship')[0]).val();
                if (selectedHouseholdRelationship != '') {
                    let dId = $($(parentPledge).find('.autocompleteDonor')[0]).data('id');
                    let sD = $.grep(donorList, function (e) { return e.id == selectedDonorId; });
                    if (sD != null && sD.length > 0) {
                        if (!sD[0].isAccount) {
                            updateHouseholdRelationship(dId, selectedHouseholdRelationship);
                        }
                    }
                }

                var txtScheduleInstanceControl = $(parentPledge).find('.txtScheduleInstance')[0];
                var scheduleEveryDayTypeControl = $(parentPledge).find('.ddlScheduleEveryDayType')[0];

                var ddlPledgeControl = $(parentPledge).find('.ddlPledge')[0];
                var ddlAllocationControl = $(parentPledge).find('.ddlAllocation')[0];

                var parentSelectedType = 84406000; // NFP CHANGE: $('input[name=donationPledgeType]:checked').val();
                if (parentSelectedType == DonationPledgeType.Donation || parentSelectedType == DonationPledgeType.Grant
                    || parentSelectedType == DonationPledgeType.Pledge) {


                    var donorCommitmentControl = $(parentPledge).find('.hiddenDonorCommitmentId')[0];

                    if (!isNullOrUndefined($(donorCommitmentControl).val())) {
                        entity["msnfp_DonorCommitmentId@odata.bind"] = "/msnfp_transactions(" + $(donorCommitmentControl).val() + ")";
                    }
                }

                entity["msnfp_firstname"] = $($(parentPledge).find('.txtFirstName')[0]).val();
                entity["msnfp_lastname"] = $($(parentPledge).find('.txtLastName')[0]).val();
                entity["msnfp_organizationname"] = $($(parentPledge).find('.txtOrganization')[0]).val();
                entity["msnfp_emailaddress1"] = $($(parentPledge).find('.txtEmail')[0]).val();
                entity["msnfp_telephone1"] = $($(parentPledge).find('.txtPhone')[0]).val();
                entity["msnfp_billing_line1"] = $($(parentPledge).find('.txtStreet1')[0]).val();
                entity["msnfp_billing_line2"] = $($(parentPledge).find('.txtStreet2')[0]).val();
                entity["msnfp_billing_line3"] = $($(parentPledge).find('.txtStreet3')[0]).val();
                entity["msnfp_billing_city"] = $($(parentPledge).find('.txtCity')[0]).val();
                entity["msnfp_billing_stateorprovince"] = $($(parentPledge).find('.txtProvince')[0]).val();
                entity["msnfp_billing_postalcode"] = $($(parentPledge).find('.txtPostalCode')[0]).val();

                entity["statuscode"] = parseInt(1);

                // Link the batch to the transaction:
                entity["msnfp_GiftBatchId@odata.bind"] = "/msnfp_giftbatchs(" + xrm.Page.data.entity.getId().replace('{', '').replace('}', '') + ")";

                var configuration = xrm.Page.data.entity.attributes.get("msnfp_configurationid");
                if (!isNullOrUndefined(configuration)) {
                    var configurationValue = configuration.getValue();
                    if (!isNullOrUndefined(configurationValue)) {
                        var configurationValueID = XrmUtility.CleanGuid(configurationValue[0].id);
                        entity["msnfp_ConfigurationId@odata.bind"] = "/msnfp_configurations(" + configurationValueID + ")";
                    }
                }

                var teamOwner = xrm.Page.data.entity.attributes.get("msnfp_teamownerid");
                if (!isNullOrUndefined(teamOwner)) {
                    var teamOwnerValue = teamOwner.getValue();
                    if (!isNullOrUndefined(teamOwnerValue)) {
                        var teamOwnerValueID = XrmUtility.CleanGuid(teamOwnerValue[0].id);
                        entity["ownerid@odata.bind"] = "/teams(" + teamOwnerValueID + ")";
                    }
                }

                var appeal = xrm.Page.data.entity.attributes.get("msnfp_appealid");
                if (!isNullOrUndefined(appeal)) {
                    var appealValue = appeal.getValue();
                    if (!isNullOrUndefined(appealValue)) {
                        var appealValueID = XrmUtility.CleanGuid(appealValue[0].id);
                        entity["msnfp_AppealId@odata.bind"] = "/msnfp_appeals(" + appealValueID + ")";
                    }
                }

                var package = xrm.Page.data.entity.attributes.get("msnfp_packageid");
                if (!isNullOrUndefined(package)) {
                    var packageValue = package.getValue();
                    if (!isNullOrUndefined(packageValue)) {
                        var packageValueID = XrmUtility.CleanGuid(packageValue[0].id);
                        entity["msnfp_PackageId@odata.bind"] = "/msnfp_packages(" + packageValueID + ")";
                    }
                }

                var hiddenPledgeIdControl = $(parentPledge).find('.hiddenPledgeId')[0];
                var pledgeId = $(hiddenPledgeIdControl).val();

                if (pledgeId == undefined || pledgeId == '') {
                    var qry = XrmServiceUtility.GetWebAPIUrl() + "msnfp_transactions";
                    XrmServiceUtility.CreateRecordAsync(qry, entity, SaveSuccessDonation, errorFailure);
                }
                else {
                    var qry = XrmServiceUtility.GetWebAPIUrl() + "msnfp_transactions(" + pledgeId + ")";
                    XrmServiceUtility.UpdateRecordAsync(qry, entity, SaveSuccessDonation, errorFailure);
                }

                calculateCurrentAmount(false);
                setGiftCountonBatchGift();

            }
            else {
                var downArrow = $(parentPledge).find('.form-control .arrow')[0];
                $(downArrow).removeClass('down').addClass('up');
                $(downArrow).parents('.donationPledge').find('.inner-controls').removeClass('hide');
                $(errorMessage).show();
                if (validationMessage) {
                    $(errorMessage).html(validationMessage);
                    validationMessage = "";
                } else {
                    $(errorMessage).append("<p>" + message + "</p>");
                }
            }
        }

        function setGiftCountonBatchGift() {
            var giftCount = 0;
            giftCount = $('.donationPledgeList').find('.donationPledge').length;
            if (!isNullOrUndefined(xrm.Page.getAttribute('msnfp_tally_gifts'))) {
                xrm.Page.getAttribute('msnfp_tally_gifts').setValue(giftCount);
                xrm.Page.data.entity.save();
            }
        }

        function calculateCurrentAmount(shouldSave) {
            var currentAmountTotal = 0;
            var currentAmountNonreceiptableTotal = 0;
            var currentAmountMembershipTotal = 0;
            var stateCode;
            $('.donationPledgeList').find('.txtAmountTotal').each(function () {
                if (!isNullOrUndefined($(this).val())) {

                    stateCode = $(this).parent().parent().children().find('.txtStateCode').text();
                    if (stateCode == "" || stateCode == "0") {
                        currentAmountTotal += parseFloat($(this).val().replace(currencySymbol, '')
                            .replace(/[^\d\.\-]/g, ""));
                    }
                }
            });

            $('.donationPledgeList').find('.txtAmountNonReceiptable').each(function () {
                if (!isNullOrUndefined($(this).val())) {

                    stateCode = $(this).parent().parent().children().find('.txtStateCode').text();
                    if (stateCode == "" || stateCode == "0") {
                        currentAmountNonreceiptableTotal += parseFloat($(this).val().replace(currencySymbol, '')
                            .replace(/[^\d\.\-]/g, ""));
                    }
                }
            });

            $('.donationPledgeList').find('.txtAmountMembership').each(function () {
                if (!isNullOrUndefined($(this).val())) {

                    stateCode = $(this).parent().parent().children().find('.txtStateCode').txt();
                    if (stateCode == "" || stateCode == "0") {
                        currentAmountMembershipTotal += parseFloat($(this).val().replace(currencySymbol, '')
                            .replace(/[^\d\.\-]/g, ""));
                    }
                }
            });

            if (!isNullOrUndefined(xrm.Page.getAttribute('msnfp_tally_amount'))) //msnfp_currentamtgifts
                xrm.Page.getAttribute('msnfp_tally_amount').setValue(currentAmountTotal);

            if (!isNullOrUndefined(xrm.Page.getAttribute('msnfp_tally_amount_nonreceiptable'))) //msnfp_currentamtnonreceiptable
                xrm.Page.getAttribute('msnfp_tally_amount_nonreceiptable').setValue(currentAmountNonreceiptableTotal);

            if (!isNullOrUndefined(xrm.Page.getAttribute('msnfp_tally_amount_membership'))) //msnfp_currentamtdues
                xrm.Page.getAttribute('msnfp_tally_amount_membership').setValue(currentAmountMembershipTotal);

            if (!isNullOrUndefined(xrm.Page.getAttribute('msnfp_tally_amount_receipted'))) //msnfp_currentamttotal
                xrm.Page.getAttribute('msnfp_tally_amount_receipted').setValue(currentAmountTotal - currentAmountNonreceiptableTotal - currentAmountMembershipTotal);


            if (shouldSave) {
                xrm.Page.data.entity.save();
            }
        }

        function enableEnter(event) {
            if (event.keyCode == 13) {
                event.preventDefault();
                addNewRow(null, true);
            }
        }

        function errorFailure(message) { alert(message); }
        //Donation Pledge
        function loadDonorList() {
            select = "contacts?$select=contactid,fullname,firstname,lastname,emailaddress1,telephone1,address1_line1,address1_line2,address1_line3,address1_city,address1_stateorprovince,address1_postalcode,msnfp_constituentnumber,msnfp_receiptpreferencecode";
            filter = "&$filter=(statuscode eq 1)";
            result = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + select + filter);
            console.debug(XrmServiceUtility.GetWebAPIUrl() + select + filter);
            $(result).each(function () {
                donorList.push({
                    id: this.contactid,
                    name: this.fullname,
                    isAccount: false
                });
                constituteList.push({
                    id: this.contactid,
                    name: this.fullname,
                    email: this.emailaddress1,
                    phone: this.telephone1,
                    street1: this.address1_line1,
                    street2: this.address1_line2,
                    street3: this.address1_line3,
                    city: this.address1_city,
                    province: this.address1_stateorprovince,
                    postalCode: this.address1_postalcode,
                });
            });
        }

        function bindConstituteAutocomplete(control) {
            var listArray = $.map(constituteList, function (element, index) {
                return { value: element.name, data: element.id };
            });
            $(control).devbridgeAutocomplete({
                lookup: listArray,
                minChars: 1,
                onSelect: function (suggestion) {
                    var result = $.grep(constituteList, function (e) { return e.id == suggestion.data; });
                    $(control).data('id', result[0].id);
                },
                onSearchStart: function () {
                    $(control).data('id', '');
                },
                showNoSuggestionNotice: true,
                noSuggestionNotice: 'Sorry, no matching results',
                onInvalidateSelection: function () {
                    $(control).val("");
                }
            });
            $(control).blur(function () {
                if (selectedConstitute == null) {
                    $(this).val('');
                }
            });
        }

        function bindDonorAutocomplete(control) {
            var listArray = $.map(donorList, function (element, index) {
                var cNumber = !isNullOrUndefined(element.cNumber) ? element.cNumber : '';
                var cName = !isNullOrUndefined(element.name) ? element.name : '';
                var cPostalCode = !isNullOrUndefined(element.postalCode) ? element.postalCode : '';
                return { value: cNumber + ' - ' + cName + ' - ' + cPostalCode, data: element.id };
            });
            $(control).devbridgeAutocomplete({
                lookup: listArray,
                minChars: 3,
                onSelect: function (suggestion) {
                    if (selectedDonor == null || suggestion.data != selectedDonor.id) {
                        var $this = $(this);
                        donorAutocompleteChange($this, suggestion.data);
                    }
                },
                onSearchStart: function () {
                    var $this = $(this);
                    if ($this.val() == '') {
                        //Rebind Latest Value
                        if ($this.data('isupdated') != undefined && $this.data('isupdated') == 'true') {
                            $(lastSearchDonorControl).autocomplete().clear();
                            bindDonorAutocomplete($this);
                            $this.removeData('isupdated');
                        }

                        $this.data('id', '');
                        selectedDonor = null;
                        var pledgeControl = $this.parents('.donationPledge').find('.ddlPledge')[0];
                        loadPledgeList(pledgeControl, null);
                    }
                },
                showNoSuggestionNotice: true,
                noSuggestionNotice: 'Sorry, no matching results',
                onInvalidateSelection: function () {
                    var $this = $(this);
                    $this.val("");
                }
            });
        }

        function donorAutocompleteChange($this, selectedData) {
            var result = $.grep(donorList, function (e) { return e.id == selectedData; });
            selectedDonor = result;
            $this.data('id', result[0].id);

            var firstNameControl = $this.parents('.donationPledge').find('.txtFirstName')[0];
            var lastNameControl = $this.parents('.donationPledge').find('.txtLastName')[0];
            var orgControl = $this.parents('.donationPledge').find('.txtOrganization')[0];
            var emailControl = $this.parents('.donationPledge').find('.txtEmail')[0];
            var phoneControl = $this.parents('.donationPledge').find('.txtPhone')[0];
            var street1Control = $this.parents('.donationPledge').find('.txtStreet1')[0];
            var street2Control = $this.parents('.donationPledge').find('.txtStreet2')[0];
            var street3Control = $this.parents('.donationPledge').find('.txtStreet3')[0];
            var cityControl = $this.parents('.donationPledge').find('.txtCity')[0];
            var provinceControl = $this.parents('.donationPledge').find('.txtProvince')[0];
            var postalCodeControl = $this.parents('.donationPledge').find('.txtPostalCode')[0];
            var giftAidAvailableControl = $this.parents('.donationPledge').find('.divGiftAidAvailable')[0];
            var giftAidNotAvailableControl = $this.parents('.donationPledge').find('.divGiftAidNotAvailable')[0];
            var receiptPreferenceControl = $this.parents('.donationPledge').find('.ddlReceiptPreference')[0];
            var pledgeOnFile = $this.parents('.donationPledge').find('.divPledgeOnFile')[0];
            var householdOnFile = $this.parents('.donationPledge').find('.divHouseholdOnFile')[0];
            var householdRelationship = $this.parents('.donationPledge').find('.divHouseholdRelationship')[0];

            var selectedDonor = null;
            if (!result[0].isAccount) {
                var select = "contacts(" + result[0].id + ")?$select=contactid,firstname,lastname,fullname,address1_line1,address1_line2,address1_line3,address1_city,address1_stateorprovince,address1_postalcode,msnfp_constituentnumber,telephone1,emailaddress1,_parentcustomerid_value,msnfp_receiptpreferencecode,_msnfp_householdid_value";
                var expand = "&$expand=parentcustomerid_account($select=accountid,name)";

                selectedDonor = XrmServiceUtility.ExecuteQueryWithExpand(XrmServiceUtility.GetWebAPIUrl() + select + expand);
                if (selectedDonor != null) {
                    $(firstNameControl).val(selectedDonor.firstname);
                    $(lastNameControl).val(selectedDonor.lastname);

                    if (selectedDonor.parentcustomerid_account != null) {
                        var parentCustomerID = selectedDonor.parentcustomerid_account.accountid;
                        var parentCustomerName = selectedDonor.parentcustomerid_account.name;
                        $(orgControl).val(parentCustomerName);
                    }
                    else {
                        $(orgControl).val('');
                    }

                    $(emailControl).val(selectedDonor.emailaddress1);
                    $(phoneControl).val(selectedDonor.telephone1);
                    $(street1Control).val(selectedDonor.address1_line1);
                    $(street2Control).val(selectedDonor.address1_line2);
                    $(street3Control).val(selectedDonor.address1_line3);
                    $(cityControl).val(selectedDonor.address1_city);
                    $(provinceControl).val(selectedDonor.address1_stateorprovince);
                    $(postalCodeControl).val(selectedDonor.address1_postalcode);
                    $(receiptPreferenceControl).val(selectedDonor.msnfp_receiptpreferencecode);


                    if (configRec.msnfp_batch_enablegiftaid == true) {
                        var selectGA = "msnfp_giftaiddeclarations?$select=_msnfp_customerid_value";
                        var filterGA = "&$filter=_msnfp_customerid_value eq " + selectedDonor.contactid;
                        var giftAid = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + selectGA + filterGA);
                        if (!isNullOrUndefined(giftAid) && giftAid.length > 0) {
                            $(giftAidAvailableControl).css('display', 'inline-block');
                            $(giftAidNotAvailableControl).css('display', 'none');
                        }
                        else {
                            $(giftAidAvailableControl).css('display', 'none');
                            $(giftAidNotAvailableControl).css('display', 'inline-block');
                        }
                    }

                    // validating pledges
                    var selectDC = "msnfp_donorcommitments?$select=msnfp_name,msnfp_donorcommitmentid,_msnfp_customerid_value";
                    var filterDC = "&$filter=(_msnfp_customerid_value eq " + selectedDonor.contactid + ") and (statuscode ne 84406001 and statuscode ne 84406003) "; // not cancelled or failed
                    var donorCommitment = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + selectDC + filterDC);

                    if (!isNullOrUndefined(donorCommitment) && donorCommitment.length > 0) {
                        $(pledgeOnFile).css('display', 'inline-block');
                    }
                    else {
                        $(pledgeOnFile).css('display', 'none');
                    }

                    // Get the Household (if applicable):
                    if (!isNullOrUndefined(selectedDonor._msnfp_householdid_value)) {
                        $(householdOnFile).css('display', 'inline-block');
                        $(householdRelationship).css('display', 'none');
                    }
                    else {
                        $(householdOnFile).css('display', 'none');
                        $(householdRelationship).css('display', 'inline-block');
                    }
                }
            }
            else {
                var select = "accounts(" + result[0].id + ")?$select=accountid,name,address1_line1,address1_line2,address1_line3,address1_city,address1_stateorprovince,address1_postalcode,telephone1,emailaddress1,_primarycontactid_value";
                var expand = "&$expand=primarycontactid($select=contactid,fullname,firstname,lastname)";

                selectedDonor = XrmServiceUtility.ExecuteQueryWithExpand(XrmServiceUtility.GetWebAPIUrl() + select + expand);
                if (selectedDonor != null) {
                    if (selectedDonor.primarycontactid != null) {
                        $(firstNameControl).val(selectedDonor.primarycontactid.firstname != null ? selectedDonor.primarycontactid.firstname : "");
                        $(lastNameControl).val(selectedDonor.primarycontactid.lastname != null ? selectedDonor.primarycontactid.lastname : "");
                    }
                    else {
                        $(firstNameControl).val('');
                        $(lastNameControl).val('');
                    }
                    $(orgControl).val(selectedDonor.name);

                    $(emailControl).val(selectedDonor.emailaddress1);
                    $(phoneControl).val(selectedDonor.telephone1);
                    $(street1Control).val(selectedDonor.address1_line1);
                    $(street2Control).val(selectedDonor.address1_line2);
                    $(street3Control).val(selectedDonor.address1_line3);
                    $(cityControl).val(selectedDonor.address1_city);
                    $(provinceControl).val(selectedDonor.address1_stateorprovince);
                    $(postalCodeControl).val(selectedDonor.address1_postalcode);
                }
            }

            var pledgeControl = $this.parents('.donationPledge').find('.ddlPledge')[0];
            loadPledgeList(pledgeControl, result[0].id);

            valueChanged($this);
        }

        function loadDonorNameList(control, donationId) {
            var donorNameList = [];
            $(control).val('');
            if (donationId != null && donationId != '') {
                var select = "msnfp_transactions?$select=msnfp_donorname";
                var filter = "&$filter=(_msnfp_customerid_value eq " + donationId + ")";
                var result = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + select + filter);

                if (result != undefined && result.length > 0) {
                    var listArray = $.map(result,
                        function (element, index) {
                            if (element.msnfp_donorname != null && element.msnfp_donorname != '')
                                return { value: element.msnfp_donorname, data: element.msnfp_donorname };
                        });
                    donorNameList = listArray.distinct();
                }
            }
            $(control).devbridgeAutocomplete({
                lookup: donorNameList,
                minChars: 1,
                onSelect: function (suggestion) {

                }
            });
        }

        function loadInHonorMemoryList(control, donationId) {
            var inHonorMemoryOfList = [];
            $(control).val('');
            if (donationId != null && donationId != '') {
                var select = "msnfp_transactions?$select=msnfp_honorormemory";
                var filter = "&$filter=(_msnfp_customerid_value eq " + donationId + ")";
                var result = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + select + filter);

                var listArray = [];
                if (result != undefined && result.length > 0) {
                    listArray = $.map(result,
                        function (element, index) {
                            if (element.msnfp_honorormemory != null && element.msnfp_honorormemory != '')
                                return { value: element.msnfp_honorormemory, data: element.msnfp_honorormemory };
                        });
                    inHonorMemoryOfList = listArray.distinct();
                }
            }
            $(control).devbridgeAutocomplete({
                lookup: inHonorMemoryOfList,
                minChars: 1,
                onSelect: function (suggestion) {

                }
            });
        }


        function loadPledgeList(control, donorId) {
            var pledgeList = [];
            $(control).html("");
            appednDefaultOption(control);
            if (donorId != null && donorId != '') {
                var select = "msnfp_donorcommitments?$select=msnfp_name,msnfp_donorcommitmentid,_msnfp_customerid_value";
                var filter = "&$filter=(_msnfp_customerid_value eq " + donorId + ") and (statuscode eq 1 or statuscode eq 84406004) "; // NFP CHANGE: and (msnfp_type eq " + DonationPledgeType.Pledge + ")";
                var result = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + select + filter);

                var listArray = [];
                if (result != undefined && result.length > 0) {
                    listArray = $.map(result,
                        function (element, index) {
                            return { value: element.msnfp_donorcommitmentid, data: element.msnfp_name };
                        });
                    pledgeList = listArray.distinct();
                }
            }
            $.each(pledgeList, function (i, item) {
                $(control).append($('<option>',
                    {
                        value: item.value,
                        text: item.data
                    }));
            });
        }

        function bindFundAutoComplete(control) {
            var listArray = $.map(fundList, function (element, index) {
                return { value: element.name, data: element.id };
            });
            $(control).devbridgeAutocomplete({
                lookup: listArray,
                minChars: 1,
                onSelect: function (suggestion) {
                    if (selectedFund == null || suggestion.data != selectedFund.id) {
                        var $this = $(this);
                        fundAutoCompleteChange($this, suggestion.data);
                    }
                },
                onSearchStart: function () {
                    var $this = $(this);
                    if ($this.val() == '') {
                        $this.data('id', '');
                        selectedFund = null;
                    }
                },
                showNoSuggestionNotice: true,
                noSuggestionNotice: 'Sorry, no matching results',
                onInvalidateSelection: function () {
                    var $this = $(this);
                    $this.val("");
                }
            });
        }

        function fundAutoCompleteChange($this, selectedData) {
            var result = $.grep(fundList, function (e) { return e.id == selectedData; });
            selectedFund = result;
            $this.data('id', result[0].id);

            valueChanged($this);
        }

        function loadCampaignList() {
            var select = "campaigns?$select=campaignid,name";
            var result = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + select);

            $(result).each(function () {
                campaignList.push({
                    id: this.campaignid,
                    name: this.name,
                });
            });
        }

        function bindCampaignAutoComplete(control) {
            var listArray = $.map(campaignList, function (element, index) {
                return { value: element.name, data: element.id };
            });
            $(control).devbridgeAutocomplete({
                lookup: listArray,
                minChars: 1,
                onSelect: function (suggestion) {
                    if (selectedCampaign == null || suggestion.data != selectedCampaign.id) {
                        var $this = $(this);
                        campaignAutoCompleteChange($this, suggestion.data);
                    }
                },
                onSearchStart: function () {
                    var $this = $(this);
                    if ($this.val() == '') {
                        $this.data('id', '');
                        selectedCampaign = null;
                    }
                },
                showNoSuggestionNotice: true,
                noSuggestionNotice: 'Sorry, no matching results',
                onInvalidateSelection: function () {
                    var $this = $(this);
                    $this.val("");
                }
            });
        }

        function campaignAutoCompleteChange($this, selectedData) {
            var result = $.grep(campaignList, function (e) { return e.id == selectedData; });
            selectedCanpaign = result;
            $this.data('id', result[0].id);

            valueChanged($this);
        }

        function loadDesignationList() {
            var select = "msnfp_designations?$select=msnfp_designationid,msnfp_name";
            var result = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + select);

            $(result).each(function () {
                designationList.push({
                    id: this.msnfp_designationid,
                    name: this.msnfp_name
                });
            });
        }

        function bindDesignationAutoComplete(control) {
            var listArray = $.map(designationList, function (element, index) {
                return { value: element.name, data: element.id };
            });
            $(control).devbridgeAutocomplete({
                lookup: listArray,
                minChars: 1,
                onSelect: function (suggestion) {
                    if (selectedDesignation == null || suggestion.data != selectedDesignation.id) {
                        var $this = $(this);
                        designationAutoCompleteChange($this, suggestion.data);
                    }
                },
                onSearchStart: function () {
                    var $this = $(this);
                    if ($this.val() == '') {
                        $this.data('id', '');
                        selectedDesignation = null;
                    }
                },
                showNoSuggestionNotice: true,
                noSuggestionNotice: 'Sorry, no matching results',
                onInvalidateSelection: function () {
                    var $this = $(this);
                    $this.val("");
                }
            });
        }

        function designationAutoCompleteChange($this, selectedData) {
            var result = $.grep(designationList, function (e) { return e.id == selectedData; });
            selectedDesignationa = result;
            $this.data('id', result[0].id);

            valueChanged($this);
        }

        function loadPledgeAllocationList(control, donationId) {
            var pledgeAllocationList = [];
            $(control).html("");
            if (donationId != null && donationId != '') {
                var select = "msnfp_pledgeallocations?$select=msnfp_pledgeallocationid,msnfp_title";
                var filter = "&$filter=(_msnfp_donationpledgeid_value eq " + donationId + ")";
                var result = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + select + filter);

                var listArray = [];
                if (result != undefined && result.length > 0) {
                    listArray = $.map(result,
                        function (element, index) {
                            return { value: element._msnfp_donationpledgeid_value, data: element.msnfp_title };
                        });
                    pledgeAllocationList = listArray.distinct();
                }
            }
            appednDefaultOption(control);
            $.each(pledgeAllocationList, function (i, item) {
                $(control).append($('<option>',
                    {
                        value: item.value,
                        text: item.data
                    }));
            });
        }

        function loadTypeList() {
            typeList = [];

            typeList.push({
                value: 84406000,
                text: "Donation"
            });

            typeList.push({
                value: 84406012,
                text: "Soft Credit (Donation)"
            });
        }

        function loadGiftTypeList() {
            giftTypeList = [];
            $("input[name=paymentType]").each(function () {
                var value = $(this).val();
                var name = $(this).next('label').text();
                giftTypeList.push({
                    value: value,
                    text: name
                });
            });
        }

        function loadDonationPledge() {
            var select = "msnfp_transactions?";
            var filter = "$filter=(_msnfp_giftbatchid_value eq " + id + ")&$orderby=createdon";
            donationPledgeList = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + select + filter);

            if (donationPledgeList != undefined && donationPledgeList.length > 0) {
                $('#tblDonationPledge').show();

                $(donationPledgeList).each(function (index, element) {

                    console.log("element.msnfp_transactionid = " + element.msnfp_transactionid);

                    var selectQuery = "msnfp_transactions(" + element.msnfp_transactionid + ")?";
                    var expandQuery = "$expand=msnfp_CustomerId_contact($select=contactid,fullname),msnfp_CustomerId_account($select=accountid,name),msnfp_RelatedConstituentId($select=contactid,fullname),msnfp_OriginatingCampaignId($select=campaignid,name),msnfp_DesignationId($select=msnfp_designationid,msnfp_name)";
                    var donationPledge = XrmServiceUtility.ExecuteQueryWithExpand(XrmServiceUtility.GetWebAPIUrl() + selectQuery + expandQuery);
                    addNewRow(donationPledge, false);
                });
            }
        }

        function showHouseholdButton(contactInfo, currentRow) {
            let contactQuery = "contacts?";
            contactQuery += "$select=contactid,_msnfp_householdid_value&";
            contactQuery += "$filter=contactid eq " + XrmUtility.CleanGuid(contactInfo.contactid) + "";

            var contactHousehold = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + contactQuery);

            if (contactHousehold != undefined && contactHousehold.length > 0) {

                if (contactHousehold[0]._msnfp_householdid_value) {
                    $($(currentRow).find('.divHouseholdOnFile')[0]).css('display', 'inline-block');
                    $($(currentRow).find('.divHouseholdRelationship')[0]).css('display', 'none');
                }
                else {
                    $($(currentRow).find('.divHouseholdOnFile')[0]).css('display', 'none');
                    $($(currentRow).find('.divHouseholdRelationship')[0]).css('display', 'inline-block');
                }
            }
        }


        function showPledgeOnFileButton(contactInfo, currentRow) {
            var options = "?$select=msnfp_donorcommitmentid&$top=1&$filter=_msnfp_customerid_value eq " + XrmUtility.CleanGuid(contactInfo.contactid); //+ " and statuscode ne 844060001 and statuscode ne 2 and statuscode ne 844060002&$top=1";
            xrm.WebApi.retrieveMultipleRecords("msnfp_donorcommitment", options).then(
                function (result) {
                    if (result !== null && typeof (result) !== undefined && result.entities.length > 0) {
                        $($(currentRow).find('.divPledgeOnFile')[0]).css('display', 'inline-block');
                    }
                    else {
                        $($(currentRow).find('.divPledgeOnFile')[0]).css('display', 'none');
                    }
                }, function (error) {
                    console.error(error);
                });
        }

        function addNewRow(result, setFocus) {

            $('.donationPledgeList').append($('.donationPledge-clone').clone());
            var addedRow = $('.donationPledgeList .donationPledge-clone');
            $(addedRow).removeClass('donationPledge-clone hide').addClass('donationPledge');

            var autocompleteDonor = $(addedRow).find('.autocompleteDonor')[0];
            bindDonorAutocomplete(autocompleteDonor);
            //autocompleteDonor.focus();

            if (setFocus == true) {
                var btnAddGreen = $(addedRow).find('.btnAddGreen')[0];
                btnAddGreen.focus();
            }

            if (configRec.msnfp_transaction_mandatecustomer == false) {
                $('.autocompleteDonor').closest('.form-control').removeClass('mandatory');
                $('.autocompleteDonor').removeAttr('aria-required');
            }

            var autocompleteConstitute = $(addedRow).find('.autocompleteConstitute')[0];
            bindConstituteAutocomplete(autocompleteConstitute);

            // Show/Hide Membership Amount
            if (configRec.msnfp_batch_enablemembershiponly == true) {
                isAmountMembershipHidden = false;
                $(addedRow).find('.divAmountMembership').css('display', 'inline-block');

                if (!isNullOrUndefined(configRec.msnfp_label_amount_membership))
                    $(addedRow).find('.divAmountMembership').find('span').text(configRec.msnfp_label_amount_membership);
            }
            else {
                isAmountMembershipHidden = true;
                $(addedRow).find('.divAmountMembership').css('display', 'none');
            }

            var divDescription = $(addedRow).find('.divDescription')[0];
            var descriptionInput = $(addedRow).find('.txtDescription')[0];
            var paymentType = 0;

            var ddlGiftType = null;
            if (configRec.msnfp_batch_paymenttype == true) {
                isGiftTypeHidden = false;
                $(addedRow).find('.divGiftType').css('display', 'inline-block');
                ddlGiftType = $(addedRow).find('.ddlGiftType')[0];
                $.each(giftTypeList, function (i, item) {
                    $(ddlGiftType).append($('<option>',
                        {
                            value: item.value,
                            text: item.text
                        }));
                });
            }
            else {
                isGiftTypeHidden = true;
                $(addedRow).find('.divGiftType').css('display', 'none');
            }

            var fundControl = null;
            if (configRec.msnfp_batch_enabledesignation == true) {
                isFundHidden = false;
                fundControl = $(addedRow).find('.autoCompleteFund')[0];
                bindFundAutoComplete(fundControl);
            }
            else {
                isFundHidden = true;
                $(addedRow).find('.divFund').css('display', 'none');
            }

            var depositeDateControl = null;
            if (configRec.msnfp_event_depositdate == true) {
                isDepositeDateHidden = false;
                depositeDateControl = $(addedRow).find('.txtDepositeDate')[0];
                $(depositeDateControl).datepicker({
                    dateFormat: 'mm/dd/yy',
                });
            }
            else {
                isDepositeDateHidden = true;
                $(addedRow).find('.divDepositeDate').css('display', 'none');
            }

            var amountNonReceiptableControl = null;
            if (configRec.msnfp_batch_nonreceiptable == true) {
                isNonReceiptableHidden = false;
                amountNonReceiptableControl = $(addedRow).find('.txtAmountNonReceiptable')[0];

                if (!isNullOrUndefined(configRec.msnfp_label_amount_nonreceiptable))
                    $(addedRow).find('.divAmountNonReceiptable').find('span').text(configRec.msnfp_label_amount_nonreceiptable);
            }
            else {
                isNonReceiptableHidden = true;
                $(addedRow).find('.divAmountNonReceiptable').css('display', 'none');
            }

            var amountMembershipcontrol = null;
            if (!isAmountMembershipHidden)
                amountMembershipcontrol = $(addedRow).find('.txtAmountMembership')[0];

            var ddlGiftSourceTypeControl = null;
            if (configRec.msnfp_batch_sourcetype == true) {
                isGiftTypeHidden = false;
                $(addedRow).find('.divGiftSource').css('display', 'inline-block');
                ddlGiftSourceTypeControl = $(addedRow).find('.ddlGiftSource')[0];
            }
            else {
                isGiftSourceHidden = true;
                $(addedRow).find('.divGiftSource').css('display', 'none');
            }

            if (!isNullOrUndefined(configRec.msnfp_label_amount_receipted))
                $(addedRow).find('.divConfirmAmount').find('span').text(configRec.msnfp_label_amount_receipted);

            if (!isNullOrUndefined(configRec.msnfp_label_amount))
                $(addedRow).find('.divAmountTotal').find('span').text(configRec.msnfp_label_amount);

            if (!isNullOrUndefined(configRec.msnfp_label_transactiondescription))
                $(addedRow).find('.divDescription').find('span').text(configRec.msnfp_label_transactiondescription);

            var ddlReceiptPreferenceControl = null;
            if (configRec.msnfp_batch_showreceiptpreference == true) {
                isReceiptPreferenceHidden = false;
                $(addedRow).find('.divReceiptPreference').css('display', 'inline-block');
                if (!isNullOrUndefined(configRec.msnfp_label_receiptpreference))
                    $(addedRow).find('.divReceiptPreference').find('span').text(configRec.msnfp_label_receiptpreference);
                ddlReceiptPreferenceControl = $(addedRow).find('.ddlReceiptPreference')[0];
            }
            else {
                isReceiptPreferenceHidden = true;
                $(addedRow).find('.divReceiptPreference').css('display', 'none');
            }

            var autoCompleteCampaign = $(addedRow).find('.autoCompleteCampaign')[0];
            bindCampaignAutoComplete(autoCompleteCampaign);

            var autoCompleteDesignation = $(addedRow).find('.autoCompleteDesignation')[0];
            bindDesignationAutoComplete(autoCompleteDesignation);

            if (!isNullOrUndefined(configRec.msnfp_label_telephone1))
                $(addedRow).find('.divPhone').find('span').text(configRec.msnfp_label_telephone1);

            if (!isNullOrUndefined(configRec.msnfp_label_line1))
                $(addedRow).find('.divLine1').find('span').text(configRec.msnfp_label_line1);

            if (!isNullOrUndefined(configRec.msnfp_label_line2))
                $(addedRow).find('.divLine2').find('span').text(configRec.msnfp_label_line2);

            if (!isNullOrUndefined(configRec.msnfp_label_city))
                $(addedRow).find('.divCity').find('span').text(configRec.msnfp_label_city);

            if (!isNullOrUndefined(configRec.msnfp_label_stateorprovince))
                $(addedRow).find('.divState').find('span').text(configRec.msnfp_label_stateorprovince);

            if (!isNullOrUndefined(configRec.msnfp_label_postalcode))
                $(addedRow).find('.divPostalCode').find('span').text(configRec.msnfp_label_postalcode);

            var selectedGiftType = $('input[name=paymentType]:checked').val();
            $(addedRow).find('.ddlGiftType').val(selectedGiftType);

            if (selectedGiftType == PaymentType.Cheque || selectedGiftType == PaymentType.WireTransfer) {
                $(addedRow).find('.txtChequeNumber').closest('.form-control').addClass('mandatory');
                $(addedRow).find('.txtChequeNumber').attr('aria-required', true);

                var chequeNumberControl = $(addedRow).find('.txtChequeNumber')[0];

                if (selectedGiftType == PaymentType.WireTransfer) {
                    $(chequeNumberControl).closest('.form-chequeNumber').find('span').text('Wire #');
                    $(chequeNumberControl).closest('.txtChequeNumber').attr('aria-label', 'Wire #');
                } else {
                    $(chequeNumberControl).closest('.form-chequeNumber').find('span').text('Check #');
                    $(chequeNumberControl).closest('.txtChequeNumber').attr('aria-label', 'Check #');
                }

                // if transaction is null
                // cheque will always be hidden
                if (result == null)
                    $(addedRow).find('.txtChequeNumber').closest('.form-control').removeClass('hide');
            }

            var selectedSource = $('input[name=giftSource]:checked').val();
            $(addedRow).find('.ddlGiftSource').val(parseInt(selectedSource));

            var selectedType = $('input[name=donationPledgeType]:checked').val();
            var amountControl = $(addedRow).find('.txtAmount')[0];
            var hdnAmountControl = $(addedRow).find('.hdnGiftAmount')[0];

            var amountTotalControl = $(addedRow).find('.txtAmountTotal')[0];
            var hdnAmountTotalControl = $(addedRow).find('.hdnGiftAmountTotal')[0];

            var scheduleInstanceControl = $(addedRow).find('.txtScheduleInstance')[0];
            var scheduleEveryDayTypeControl = $(addedRow).find('.ddlScheduleEveryDayType')[0];

            var customeridValue = null;
            var relatedpledgeidValue = null;
            if (result != null) {
                customeridValue = result._msnfp_customerid_value;
                relatedpledgeidValue = result._msnfp_relatedpledgeid_value;
            }

            var pledgeControl = $(addedRow).find('.ddlPledge')[0];
            loadPledgeList(pledgeControl, customeridValue);

            var pledgeAllocationControl = $(addedRow).find('.ddlAllocation')[0];
            loadPledgeAllocationList(pledgeAllocationControl, relatedpledgeidValue);

            $($(addedRow).find('.divGiftAidNotAvailable')[0]).css('display', 'none');
            $($(addedRow).find('.divGiftAidAvailable')[0]).css('display', 'none');
            $($(addedRow).find('.divHouseholdOnFile')[0]).css('display', 'none');
            $($(addedRow).find('.divPledgeOnFile')[0]).css('display', 'none');

            if (result != null) {
                var statusControl = $(addedRow).find('.txtStatus');
                var stateCodeControl = $(addedRow).find('.txtStateCode');
                var statusVal = result.statecode == 0 ? "Active" : "Inactive";
                statusControl.val(statusVal);
                stateCodeControl.text(result.statecode);
                var hiddenPledgeIdControl = $(addedRow).find('.hiddenPledgeId')[0];
                $(hiddenPledgeIdControl).val(result.msnfp_transactionid);

                if (result.msnfp_CustomerId_contact != null) {

                    showHouseholdButton(result.msnfp_CustomerId_contact, addedRow);
                    showPledgeOnFileButton(result.msnfp_CustomerId_contact, addedRow);

                    $(autocompleteDonor).val(result.msnfp_CustomerId_contact.fullname);
                    $(autocompleteDonor).data('id', result.msnfp_CustomerId_contact.contactid);

                    if (configRec.msnfp_batch_enablegiftaid == true) {
                        var selectGA = "msnfp_giftaiddeclarations?$select=_msnfp_customerid_value";
                        var filterGA = "&$filter=_msnfp_customerid_value eq " + result.msnfp_CustomerId_contact.contactid;
                        var giftAid = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + selectGA + filterGA);

                        if (!isNullOrUndefined(giftAid) && giftAid.length > 0) {
                            $($(addedRow).find('.divGiftAidAvailable')[0]).css('display', 'inline-block');
                            $($(addedRow).find('.divGiftAidNotAvailable')[0]).css('display', 'none');
                        }
                        else {
                            $($(addedRow).find('.divGiftAidAvailable')[0]).css('display', 'none');
                            $($(addedRow).find('.divGiftAidNotAvailable')[0]).css('display', 'inline-block');

                            var ddlDeclarationDeliveredControl = $(addedRow).find('.ddlDeclarationDelivered')[0];
                            //$(ddlDeclarationDeliveredControl).val(result.msnfp_declarationdelivered);

                            if (!isNullOrUndefined(result.msnfp_ga_deliverycode))
                                $(ddlDeclarationDeliveredControl).val(result.msnfp_ga_deliverycode);
                        }
                    }
                }
                else if (result.msnfp_CustomerId_account != null) {
                    // Hide household for accounts
                    $($(addedRow).find('.divHouseholdOnFile')[0]).css('display', 'none');
                    $($(addedRow).find('.divHouseholdRelationship')[0]).css('display', 'none');
                    $(autocompleteDonor).val(result.msnfp_CustomerId_account.name);
                    $(autocompleteDonor).data('id', result.msnfp_CustomerId_account.accountid);
                }

                if (result.msnfp_relatedconstituentId != null) {
                    $(autocompleteConstitute).val(result.msnfp_relatedconstituentId.fullname);
                    $(autocompleteConstitute).data('id', result.msnfp_relatedconstituentId.contactid);
                }

                $($(addedRow).find('.txtFirstName')[0]).val(result.msnfp_firstname);
                $($(addedRow).find('.txtLastName')[0]).val(result.msnfp_lastname);
                $($(addedRow).find('.txtOrganization')[0]).val(result.msnfp_organizationname);
                $($(addedRow).find('.txtEmail')[0]).val(result.msnfp_emailaddress1);
                $($(addedRow).find('.txtPhone')[0]).val(result.msnfp_telephone1);
                $($(addedRow).find('.txtStreet1')[0]).val(result.msnfp_billing_line1);
                $($(addedRow).find('.txtStreet2')[0]).val(result.msnfp_billing_line2);
                $($(addedRow).find('.txtStreet3')[0]).val(result.msnfp_billing_line3);
                $($(addedRow).find('.txtCity')[0]).val(result.msnfp_billing_city);
                $($(addedRow).find('.txtProvince')[0]).val(result.msnfp_billing_stateorprovince);
                $($(addedRow).find('.txtPostalCode')[0]).val(result.msnfp_billing_postalcode);

                if (!isNullOrUndefined(result.msnfp_amount_receipted)) {
                    $(amountControl).val(currencySymbol + addCommasonLoad(result.msnfp_amount_receipted.toFixed(2)));
                }
                $(hdnAmountControl).val(result.msnfp_amount_receipted);

                $(amountTotalControl).val(currencySymbol + addCommasonLoad(result.msnfp_amount.toFixed(2)));
                $(hdnAmountTotalControl).val(result.msnfp_amount);

                $(ddlGiftType).val(result.msnfp_paymenttypecode);
                if (result.msnfp_paymenttypecode == PaymentType.Cheque || result.msnfp_paymenttypecode == PaymentType.WireTransfer) {
                    var chequeNumberControl = $(addedRow).find('.txtChequeNumber')[0];
                    $(chequeNumberControl).val(result.msnfp_chequenumber);
                    $(chequeNumberControl).removeClass('hide');
                    $(addedRow).find('.txtChequeNumber').closest('.form-control').removeClass('hide');

                    if (result.msnfp_paymenttypecode == PaymentType.WireTransfer) {
                        $(chequeNumberControl).closest('.form-chequeNumber').find('span').text('Wire #');
                        $(chequeNumberControl).closest('.txtChequeNumber').attr('aria-label', 'Wire #');
                    } else {
                        $(chequeNumberControl).closest('.form-chequeNumber').find('span').text('Check #');
                        $(chequeNumberControl).closest('.txtChequeNumber').attr('aria-label', 'Check #');
                    }
                }

                $(ddlGiftSourceTypeControl).val(result.msnfp_dataentrysource);

                $(ddlReceiptPreferenceControl).val(result.msnfp_receiptpreferencecode);

                $(pledgeControl).val(relatedpledgeidValue);
                $(pledgeAllocationControl).val(result._msnfp_pledgeallocationid_value);

                $(scheduleInstanceControl).val(result.msnfp_recurrenceinstance);
                $(scheduleEveryDayTypeControl).val(result.msnfp_recurrencetype);

                // Set the campaign:
                if (!isNullOrUndefined(result._msnfp_originatingcampaignid_value)) {
                    $(autoCompleteCampaign).val(result.msnfp_OriginatingCampaignId.name);
                    $(autoCompleteCampaign).data('id', result.msnfp_OriginatingCampaignId.campaignid);
                }

                // Set the designation:
                if (!isNullOrUndefined(result._msnfp_designationid_value)) {
                    $(autoCompleteDesignation).val(result.msnfp_DesignationId.msnfp_name);
                    $(autoCompleteDesignation).data('id', result.msnfp_DesignationId.msnfp_designationid);
                }

                // Set the deposit date:
                if (!isNullOrUndefined(result.msnfp_receiveddate)) {
                    var utcYear1 = new Date(result.msnfp_receiveddate).getFullYear();
                    var utcMonth1 = new Date(result.msnfp_receiveddate).getMonth();
                    var utcDate1 = new Date(result.msnfp_receiveddate).getDate();

                    var depositDt = new Date(utcYear1, utcMonth1, utcDate1);
                    $(depositeDateControl).val(getFormattedDateToDisplay(depositDt));
                }

                var amtNonReceiptable = 0;

                if (!isNullOrUndefined(result.msnfp_amount_nonreceiptable)) {
                    $(amountNonReceiptableControl).val(currencySymbol + addCommasonLoad(result.msnfp_amount_nonreceiptable.toFixed(2)));
                    amtNonReceiptable = result.msnfp_amount_nonreceiptable;
                }

                // hide/show description - start
                if (!isGiftTypeHidden) {
                    paymentType = $(addedRow).find('.ddlGiftType')[0].value;
                }

                if ((paymentType == PaymentType.InKind || paymentType == PaymentType.Gift || paymentType == PaymentType.Stock || paymentType == PaymentType.Property) ||
                    amtNonReceiptable > 0) {
                    $(divDescription).css('display', 'inline-block');
                    $(divDescription).addClass('mandatory');
                    $(descriptionInput).attr('aria-required',true);
                }
                // hide/show description - end

                if (!isNullOrUndefined(result.msnfp_amount_membership) && !isAmountMembershipHidden)
                    $(amountMembershipcontrol).val(currencySymbol + addCommasonLoad(result.msnfp_amount_membership.toFixed(2)));


                if (!isNullOrUndefined(result.msnfp_transactiondescription)) {
                    var txtDescription = $(addedRow).find('.txtDescription')[0];
                    $(txtDescription).val(result.msnfp_transactiondescription);
                }
            }
            else {
                var campaign = xrm.Page.data.entity.attributes.get("msnfp_campaignid");
                if (!isNullOrUndefined(campaign)) {
                    var campaignRec = xrm.Page.data.entity.attributes.get("msnfp_campaignid").getValue();
                    if (!isNullOrUndefined(campaignRec)) {
                        var campaignID = XrmUtility.CleanGuid(xrm.Page.data.entity.attributes.get("msnfp_campaignid").getValue()[0].id);
                        var campaignTitle = xrm.Page.data.entity.attributes.get("msnfp_campaignid").getValue()[0].name;

                        $(autoCompleteCampaign).val(campaignTitle);
                        $(autoCompleteCampaign).data('id', campaignID);
                    }
                }

                var designation = xrm.Page.data.entity.attributes.get("msnfp_designationid");
                if (!isNullOrUndefined(designation)) {
                    var designationRec = xrm.Page.data.entity.attributes.get("msnfp_designationid").getValue();
                    if (!isNullOrUndefined(designationRec)) {
                        var designationID = XrmUtility.CleanGuid(xrm.Page.data.entity.attributes.get("msnfp_designationid").getValue()[0].id);
                        var designationTitle = xrm.Page.data.entity.attributes.get("msnfp_designationid").getValue()[0].name;

                        $(autoCompleteDesignation).val(designationTitle);
                        $(autoCompleteDesignation).data('id', designationID);
                    }
                }

                // hide/show description - start
                if (!isGiftTypeHidden) {
                    paymentType = $(addedRow).find('.ddlGiftType')[0].value;
                }

                if (paymentType == PaymentType.InKind || paymentType == PaymentType.Gift || paymentType == PaymentType.Stock || paymentType == PaymentType.Property) {
                    $(divDescription).css('display', 'inline-block');
                    $(divDescription).addClass('mandatory');
                    $(descriptionInput).attr('aria-required',true);
                }

                var date = xrm.Page.data.entity.attributes.get("msnfp_depositdate");
                if (!isNullOrUndefined(date)) {
                    var dateValue = xrm.Page.data.entity.attributes.get("msnfp_depositdate").getValue();
                    if (!isNullOrUndefined(dateValue) && !isNullOrUndefined(depositeDateControl))
                        $(depositeDateControl).val(getFormattedDateToDisplay(dateValue));
                }
            }

            hideShowDonationPledgeFields(addedRow);
            showHideCustomerFields();
        }

        function addCommasonLoad(nStr) {
            if (typeof (nStr !== 'string')) {
                nStr = nStr.toString();
            }
            if (nStr != 0) {
                nStr = nStr.replace(currencySymbol, '').replace(',', '');
                nStr += '';
                x = nStr.split('.');
                x1 = x[0];
                x2 = x.length > 1 ? '.' + x[1] : '';
                var rgx = /(\d+)(\d{3})/;
                while (rgx.test(x1)) {
                    x1 = x1.replace(rgx, '$1' + ',' + '$2');
                }
                return x1 + x2;
            }
            else return '0.00';
        }

        function setDonationPledgeType(control, type, occurencetype) {
            if (type == DonationPledgeType.Donation && occurencetype == DonationOccurrence.Instant)
                $(control).val(DonationPledgeType.Donation);
            else if (type == DonationPledgeType.Grant && occurencetype == DonationOccurrence.Instant)
                $(control).val(DonationPledgeType.Grant);
            else if (type == DonationPledgeType.Pledge && occurencetype == DonationOccurrence.Instant)
                $(control).val(DonationPledgeType.Pledge);
            else if (type == DonationPledgeType.Donation && occurencetype == DonationOccurrence.Recurring)
                $(control).val(DonationPledgeType.RecurringDonation);
            else if (type == DonationPledgeType.DonationSchedule && occurencetype == DonationOccurrence.Recurring)
                $(control).val(DonationPledgeType.DonationSchedule);
            else if (type == DonationPledgeType.PledgeSchedule && occurencetype == DonationOccurrence.Recurring)
                $(control).val(DonationPledgeType.PledgeSchedule);
        }

        function hideShowDonationPledgeFields(donationPledge) {
            var $this = $(donationPledge);

            var selectedVal = 84406000;
            var scheduleInstanceControl = $this.find('.form-scheduleinstance')[0];

            if (selectedVal == DonationPledgeType.Donation || selectedVal == DonationPledgeType.Grant || selectedVal == DonationPledgeType.Pledge) {
                $(scheduleInstanceControl).addClass('hide');

                $this.find('div.divGiftSource').removeClass('inner-controls hide');
            }
            else {
                var pledgecontrol = $this.find('.ddlPledge')[0];

                var allocationcontrol = $this.find('.ddlAllocation')[0];

                var txtScheduleInstanceControl = $(scheduleInstanceControl).find('.txtScheduleInstance')[0];
                $(txtScheduleInstanceControl).prop('disabled', false);

                var scheduleEveryDayTypeControl = $(scheduleInstanceControl).find('.ddlScheduleEveryDayType')[0];
                $(scheduleEveryDayTypeControl).prop('disabled', false);

                $(pledgecontrol).val('');
                $(pledgecontrol).prop('disabled', false);

                $(allocationcontrol).val('');
                $(allocationcontrol).prop('disabled', false);

                $(txtScheduleInstanceControl).val('');
                $(txtScheduleInstanceControl).prop('disabled', true);

                $(scheduleEveryDayTypeControl).val('');
                $(scheduleEveryDayTypeControl).prop('disabled', true);

                $(scheduleInstanceControl).removeClass('hide');
                $this.find('div.divGiftSource').addClass('inner-controls hide');
            }

            var selectedGiftType = $($this.find('.ddlGiftType')[0]).val();
            if (selectedGiftType == PaymentType.Cheque || selectedGiftType == PaymentType.WireTransfer) {
                var chequeNumberControl = $this.find('.form-chequeNumber')[0];
                $(chequeNumberControl).removeClass('hide');
            }

            var iArrow = $this.find('.arrow')[0];
            if ($(iArrow).hasClass('up')) {
                $this.find('div.divGiftSource').removeClass('hide');
            }
        }

        function validate(donationPledge) {
            var isValidate = true;
            var validationMessage = "";
            $(donationPledge).find('div.mandatory input[type!="hidden"],  div.mandatory select, input.mandatory').each(function () {
                var $this = $(this);
                if ($this.val() == '') {
                    console.debug(this);
                    validationMessage = "Please fill out the mandatory field: " + $this.attr('aria-label');
                    return validationMessage;
                }
            });

            var amountTotal = parseFloat($($(parentPledge).find('.txtAmountTotal')[0]).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, ""));

            console.debug("amount:" + amountTotal);

            var amountNonReceiptableField = $(donationPledge).find("input.txtAmountNonReceiptable");
            var amountNonReceiptable = 0;
            if (amountNonReceiptableField.val().length > 0) {
                //amountNonReceiptable = parseFloat(amountNonReceiptableField.val().replace(currencySymbol, ""));
                amountNonReceiptable = parseFloat($($(parentPledge).find('.txtAmountNonReceiptable')[0]).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, ""));
            }
            console.debug("amountNonReceiptable:" + amountNonReceiptable);

            var amountMembershipField = $(donationPledge).find("input.txtAmountMembership");
            var amountMembership = 0;
            if (amountMembershipField.val().length > 0) {
                //amountamountMembership = parseFloat(amountNonReceiptableField.val().replace(currencySymbol, ""));
                amountMembership = parseFloat($($(parentPledge).find('.txtAmountMembership')[0]).val().replace(currencySymbol, '').replace(/[^\d\.\-]/g, ""));
            }
            console.debug("amountMembership:" + amountMembership);


            // membership amount must be less than or equal to total gift amount
            if (amountTotal < amountMembership && configRec.msnfp_batch_enablemembershiponly) {
                validationMessage = "\Amount (Membership) cannot exceed Total Amount.";
                isValidate = false;
            }

            // non-receiptable amount must be less than or equal to total gift amount
            if (amountTotal - amountMembership < amountNonReceiptable) {
                validationMessage = "\Amount (Nonreceiptable) cannot exceed Total Amount.";
                isValidate = false;
            }

            return validationMessage;
        }

        function valueChanged($this) {
            if (isFormLoaded) {
                xrm.Page.ui.clearFormNotification("svd");
                var parentPledge = $this.parents('.donationPledge');
                var buttonSave = parentPledge.find('.button-save')[0];
                $(buttonSave).show();
            }
            else {
                $('.donationPledge').find('.button-save').hide();
            }
        }

        //Search Donation
        function loadAllDonationList() {
            if (searchDonationLoaded == false) {
                searchDonationLoaded = true;

                searchOrganizationTable = $('#searchDonationOrganization').DataTable({
                    "info": false,
                    "bPaginate": true,
                    "bFilter": true,
                    "bLengthChange": false,
                    "sPaginationType": "numbers",
                    "iDisplayLength": 5,
                    "columnDefs": [
                        { "orderable": false, "width": "14%", "targets": 0 },
                        { "width": "14%", "targets": 1 },
                        { "width": "14%", "targets": 2 },
                        { "width": "14%", "targets": 3 },
                        { "width": "14%", "targets": 4 },
                        { "width": "8%", "targets": 5 },
                        { "width": "8%", "targets": 6 },
                        { "width": "8%", "targets": 7 },
                        { "width": "6%", "targets": 8 }
                    ],
                    "order": [[1, "asc"]]
                });

                var dataUrl = XrmServiceUtility.GetWebAPIUrl();
                var select = "$expand=primarycontactid($select=fullname, contactid)";
                var filter = "&$filter=(statuscode eq 1)";
                var selectQuery = "accounts?" + select + filter;
                var result = MetadataQuery.GetOptionSetValues(dataUrl + selectQuery);

                $(result).each(function () {
                    var primaryContactName = '';
                    var primaryContactId = '';
                    if (this.primarycontactid != null) {
                        primaryContactName = this.primarycontactid.fullname;
                        primaryContactId = this.primarycontactid.contactid;
                    }

                    var isVIP = false;
                    if (this.msnfp_vip != null && this.msnfp_vip == true)
                        isVIP = true;

                    searchDonationOrganizationList.push({
                        id: this.accountid,
                        name: this.name,
                        primarycontactidname: primaryContactName,
                        primaryContactId: primaryContactId,
                        emailaddress1: this.emailaddress1,
                        telephone1: this.telephone1,
                        address1_line1: this.address1_line1,
                        address1_city: this.address1_city,
                        address1_stateorprovince: this.address1_stateorprovince,
                        address1_postalcode: this.address1_postalcode,
                        msnfp_vip: isVIP
                    });
                    var hiddenId = "<input type='hidden' value='" + this.accountid + "' />";

                    searchOrganizationTable.row.add([
                        hiddenId + this.name,
                        primaryContactName,
                        this.emailaddress1,
                        this.telephone1,
                        this.address1_line1,
                        this.address1_city,
                        this.address1_stateorprovince,
                        this.address1_postalcode,
                        isVIP
                    ]).draw(false);
                });

                searchConstituteTable = $('#searchDonationContact').DataTable({
                    "info": false,
                    "bPaginate": true,
                    "bFilter": true,
                    "bLengthChange": false,
                    "sPaginationType": "numbers",
                    "iDisplayLength": 5,
                    "columnDefs": [
                        { "orderable": false, "width": "14%", "targets": 0 },
                        { "width": "14%", "targets": 1 },
                        { "width": "14%", "targets": 2 },
                        { "width": "14%", "targets": 3 },
                        { "width": "14%", "targets": 4 },
                        { "width": "8%", "targets": 5 },
                        { "width": "8%", "targets": 6 },
                        { "width": "8%", "targets": 7 },
                        { "width": "6%", "targets": 8 }
                    ],
                    "order": [[1, "asc"]]
                });

                filter = "$filter=(statuscode eq 1)";
                selectQuery = "contacts?" + filter;
                result = MetadataQuery.GetOptionSetValues(dataUrl + selectQuery);

                $(result).each(function () {
                    var hiddenId = "<input type='hidden' value='" + this.contactid + "' />";

                    var isVIP = false;
                    if (this.msnfp_vip != null && this.msnfp_vip == true)
                        isVIP = true;

                    var contactId = this.contactid;
                    var organizationName = '';

                    if (searchDonationOrganizationList != null && searchDonationOrganizationList.length > 0) {
                        $(searchDonationOrganizationList).each(function () {
                            if (this.primaryContactId != null && this.primaryContactId == contactId)
                                organizationName = this.name;
                        });
                    }

                    searchDonationContactList.push({
                        id: this.contactid,
                        name: this.fullname,
                        primarycontactidname: '',
                        emailaddress1: this.emailaddress1,
                        telephone1: this.telephone1,
                        address1_line1: this.address1_line1,
                        address1_city: this.address1_city,
                        address1_stateorprovince: this.address1_stateorprovince,
                        address1_postalcode: this.address1_postalcode,
                        msnfp_vip: isVIP
                    });

                    searchConstituteTable.row.add([
                        hiddenId + this.fullname,
                        organizationName,
                        this.emailaddress1,
                        this.telephone1,
                        this.address1_line1,
                        this.address1_city,
                        this.address1_stateorprovince,
                        this.address1_postalcode,
                        isVIP
                    ]).draw(false);
                });
            }
        }

        function getCurrencySymbol() {
            var currencyField = xrm.Page.data.entity.attributes.get("transactioncurrencyid").getValue();
            if (!isNullOrUndefined(currencyField)) {
                var currencyid = xrm.Page.data.entity.attributes.get("transactioncurrencyid").getValue()[0].id;
                var currencySelect = "transactioncurrencies?$select=transactioncurrencyid,currencysymbol"
                currencySelect += "&$filter=transactioncurrencyid eq " + XrmUtility.CleanGuid(currencyid);
                var currencyRec = XrmServiceUtility.ExecuteQuery(XrmServiceUtility.GetWebAPIUrl() + currencySelect);
                if (!isNullOrUndefined(currencyRec))
                    currencyRec = currencyRec[0];

                if (!isNullOrUndefined(currencyRec)) {
                    currencySymbol = currencyRec.currencysymbol;
                }
            }
        }

        function createAccount() {
            var entity = {};

            entity["name"] = $('#txtNewInstitute').val();
            entity["emailaddress1"] = $('#txtNewEmail').val();
            entity["telephone1"] = $('#txtNewPhone').val();
            entity["address1_line1"] = $('#txtNewAddressLine1').val();
            entity["address1_line2"] = $('#txtNewAddressLine2').val();
            entity["address1_city"] = $('#txtNewAddressCity').val();
            entity["address1_stateorprovince"] = $('#txtNewAddressProvicne').val();
            entity["address1_postalcode"] = $('#txtNewAddressPostalCode').val();

            var qry = XrmServiceUtility.GetWebAPIUrl() + "accounts";
            var accountId = XrmServiceUtility.CreateRecord(qry, entity);
            return accountId;
        }

        function createContact(accountId) {
            var entity = {};

            entity["firstname"] = $('#txtNewFirstName').val();
            entity["lastname"] = $('#txtNewLastName').val();
            entity["emailaddress1"] = $('#txtNewEmail').val();
            entity["telephone1"] = $('#txtNewPhone').val();
            entity["address1_line1"] = $('#txtNewAddressLine1').val();
            entity["address1_line2"] = $('#txtNewAddressLine2').val();
            entity["address1_city"] = $('#txtNewAddressCity').val();
            entity["address1_stateorprovince"] = $('#txtNewAddressProvicne').val();
            entity["address1_postalcode"] = $('#txtNewAddressPostalCode').val();

            if (accountId != null) {
                entity["parentcustomerid_account@odata.bind"] = "/accounts(" + accountId + ")";
            }

            var qry = XrmServiceUtility.GetWebAPIUrl() + "contacts";
            var contactId = XrmServiceUtility.CreateRecord(qry, entity);
            return contactId;
        }

        function updatePrimaryContact(contactId, accountId) {
            var account = {};
            account["primarycontactid@odata.bind"] = "/contacts(" + contactId + ")";
            var qry = XrmServiceUtility.GetWebAPIUrl() + "accounts(" + accountId + ")";
            XrmServiceUtility.UpdateRecord(qry, account);
        }

        function updateHouseholdRelationship(contactId, selectedRelationship) {
            var contact = {};
            contact["msnfp_householdrelationship"] = selectedRelationship;
            var qry = XrmServiceUtility.GetWebAPIUrl() + "contacts(" + contactId + ")";
            XrmServiceUtility.UpdateRecord(qry, contact);
        }

        //Helper Methods
        function getFormattedDate(date) {
            return date.getFullYear()
                + "-"
                + ("0" + (date.getMonth() + 1)).slice(-2)
                + "-"
                + ("0" + date.getDate()).slice(-2);
        }

        function getFormattedDateToDisplay(date) {
            return ("0" + (date.getMonth() + 1)).slice(-2)
                + "/"
                + ("0" + date.getDate()).slice(-2)
                + "/"
                + date.getFullYear();
        }


        //Helper Methods
        Array.prototype.distinct = function () {
            var map = {}, out = [];
            var l = this.length;

            for (var i = 0; i < l; i++) {
                if (map[this[i].data]) { continue; }

                out.push(this[i]);
                map[this[i].data] = 1;
            }

            return out;
        }

        function appednDefaultOption(control) {
            $(control).append($('<option>',
                {
                    value: '',
                    text: '--Select--'
                }));
        }

        function disableFields() {
            $('.switch-field input').each(function () {
                $(this).attr("disabled", "disabled");
            });

            // Disable the fields:
            formType = xrm.Page.ui.getFormType();

            if (formType == FormType.Disabled || xrm.Page.getAttribute('statuscode').getValue() == 844060000) {
                $("input").prop("disabled", true);
                $("select").prop("disabled", true);

                $(".btnAdd").addClass('btn-disabled');
                $(".btnRemove").addClass('btn-disabled');
                $(".btnPlusMinus").addClass('btn-disabled');

            }

            // If it is not disabled, we need to reactivate the payment/source inputs:
            if (formType != FormType.Disabled) {
                $('input[name=paymentType]').prop("disabled", false);
                $('input[name=giftSource]').prop("disabled", false);
            }
        }

        $(document).ajaxStart(function () {
            //ajax request went so show the loading image
            $('#ajax-loader').show();
        });

        $(document).ajaxComplete(function () {
            //got response so hide the loading image
            $('#ajax-loader').hide();
        });

        function SaveSuccessDonation(recordID) {
            var buttonSave = parentPledge.find('.button-save')[0];
            $(buttonSave).hide();
            $($(parentPledge).find('.hiddenPledgeId')[0]).val(recordID);

            xrm.Page.ui.setFormNotification("Record saved.", "INFORMATION", "svd");
        }

        function isNullOrUndefined(value) {
            return (typeof (value) === "undefined" || value === null || value === "");
        }


        function getTotalAmount($this) {
            var amount = 0;
            var i = 0;
            $this.find('table.table-main tbody tr').each(function () {
                if (i != 0) {
                    amount += parseFloat($(this).find('input.txtFAAmount').val());
                }
                i++;
            });
            return amount;
        }

        function calculateAmount($this, currentGiftAmount) {
            var amount = 0;
            var i = 0;
            $this.find('table.table-main tbody tr').each(function () {
                var txtAmount = $(this).find('input.txtFAAmount').val();
                if (i != 0 && txtAmount != '') {
                    amount += parseFloat(txtAmount);
                }
                i++;
            });
            $this.find('table.table-main tbody tr:first').find('input.txtFAAmount').val(currentGiftAmount - amount);
            disableRemovebutton($this);
        }

        function disableRemovebutton($this) {
            if ($this.find('table.table-main tbody tr').length == 1) {
                $this.find('table.table-main tbody tr:first').find('.btnRemove').addClass('btn-disabled');
            }
            else
                $this.find('table.table-main tbody tr:first').find('.btnRemove').addClass('btn-disabled');
        }

        function enableButtons($fundFrame) {
            $fundFrame.find('.div-buttons').show();
            $fundFrame.find('div.success-msg').hide();
        }

        function getODataPreDateFilter(date) {
            var monthString;
            var rawMonth = (date.getMonth() + 1).toString();
            if (rawMonth.length == 1) {
                monthString = "0" + rawMonth;
            }
            else { monthString = rawMonth; }

            var dateString;
            var rawDate = (date.getDate()).toString();
            if (rawDate.length == 1) {
                dateString = "0" + rawDate;
            }
            else { dateString = rawDate; }

            var DateFilter = "";
            DateFilter += date.getFullYear() + "-";
            DateFilter += monthString + "-";
            DateFilter += dateString;
            DateFilter += "T00:00:00Z";
            return DateFilter;
        }

        function getTotalReceiptableAmount(amountTotal, amountNonReceiptable, isNonReceiptableHidden, amountMembership) {

            var giftAmountVal = !isNullOrUndefined(amountTotal) ? parseFloat(amountTotal.replace(currencySymbol, '').replace(/[^\d\.\-]/g, "")) : 0;
            var amountNonReceiptableVal = !isNullOrUndefined(amountNonReceiptable) ? parseFloat(amountNonReceiptable.replace(currencySymbol, '').replace(/[^\d\.\-]/g, "")) : 0;
            var amountMembershipVal = !isNullOrUndefined(amountMembership) ? parseFloat(amountMembership.replace(currencySymbol, '').replace(/[^\d\.\-]/g, "")) : 0;

            var amountTotalReceiptable;
            if (isNonReceiptableHidden) {
                amountTotalReceiptable = giftAmountVal - amountMembershipVal;
            } else {
                amountTotalReceiptable = giftAmountVal - amountNonReceiptableVal - amountMembershipVal;
            }

            return amountTotalReceiptable;
        }

    </script>



</body></html>